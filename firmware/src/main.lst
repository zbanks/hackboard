ARM GAS  /tmp/cc2NM2Xt.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   5              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   6              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   7              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   8              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   9              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  10              		.eabi_attribute 30, 6	@ Tag_ABI_optimization_goals
  11              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  12              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  13              		.file	"main.c"
  14              	@ GNU C (GNU Tools for ARM Embedded Processors) version 4.8.3 20131129 (release) [ARM/embedded-4_8-
  15              	@	compiled by GNU C version 4.3.6, GMP version 4.3.2, MPFR version 2.4.2, MPC version 0.8.1
  16              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  17              	@ options passed:  -I . -I ./inc
  18              	@ -I /home/zbanks//STM32L1xx_StdPeriph_Lib_V1.2.0/Libraries/CMSIS/Device/ST/STM32L1xx/Include
  19              	@ -I /home/zbanks//STM32L1xx_StdPeriph_Lib_V1.2.0/Libraries/CMSIS/Include
  20              	@ -I /home/zbanks//STM32L1xx_StdPeriph_Lib_V1.2.0/Libraries/STM32L1xx_StdPeriph_Driver/inc
  21              	@ -I ./inc -imultilib armv7-m
  22              	@ -iprefix /home/zbanks/gcc-arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.8.3/
  23              	@ -isysroot /home/zbanks/gcc-arm-none-eabi/bin/../arm-none-eabi
  24              	@ -MD src/main.d -MF .dep/main.o.d -MP -MQ src/main.o -D__USES_INITFINI__
  25              	@ -D STM32L1XX_MD -D USE_STDPERIPH_DRIVER -D malloc_getpagesize=256
  26              	@ -D RUN_FROM_FLASH=1 src/main.c -mcpu=cortex-m3 -mthumb
  27              	@ -auxbase-strip src/main.o -g -gdwarf-2 -O0 -Wall -Wstrict-prototypes
  28              	@ -std=c99 -fomit-frame-pointer -fverbose-asm
  29              	@ options enabled:  -faggressive-loop-optimizations -fauto-inc-dec
  30              	@ -fbranch-count-reg -fcommon -fdelete-null-pointer-checks -fdwarf2-cfi-asm
  31              	@ -fearly-inlining -feliminate-unused-debug-types -ffunction-cse -fgcse-lm
  32              	@ -fgnu-runtime -fident -finline-atomics -fira-hoist-pressure
  33              	@ -fira-share-save-slots -fira-share-spill-slots -fivopts
  34              	@ -fkeep-static-consts -fleading-underscore -fmath-errno
  35              	@ -fmerge-debug-strings -fmove-loop-invariants -fomit-frame-pointer
  36              	@ -fpeephole -fprefetch-loop-arrays -freg-struct-return
  37              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  38              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  39              	@ -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
  40              	@ -fsched-stalled-insns-dep -fshow-column -fsigned-zeros
  41              	@ -fsplit-ivs-in-unroller -fstrict-volatile-bitfields -fsync-libcalls
  42              	@ -ftrapping-math -ftree-coalesce-vars -ftree-cselim -ftree-forwprop
  43              	@ -ftree-loop-if-convert -ftree-loop-im -ftree-loop-ivcanon
  44              	@ -ftree-loop-optimize -ftree-parallelize-loops= -ftree-phiprop -ftree-pta
  45              	@ -ftree-reassoc -ftree-scev-cprop -ftree-slp-vectorize
  46              	@ -ftree-vect-loop-version -funit-at-a-time -fverbose-asm
  47              	@ -fzero-initialized-in-bss -mfix-cortex-m3-ldrd -mlittle-endian
  48              	@ -mpic-data-is-text-relative -msched-prolog -mthumb -munaligned-access
  49              	@ -mvectorize-with-neon-quad
  50              	
  51              		.text
  52              	.Ltext0:
  53              		.cfi_sections	.debug_frame
  54              		.align	2
  55              		.thumb
  56              		.thumb_func
  57              		.type	NVIC_SetPriority, %function
ARM GAS  /tmp/cc2NM2Xt.s 			page 2


  58              	NVIC_SetPriority:
  59              	.LFB47:
  60              		.file 1 "./inc/core_cm3.h"
   1:./inc/core_cm3.h **** /**************************************************************************//**
   2:./inc/core_cm3.h ****  * @file     core_cm3.h
   3:./inc/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:./inc/core_cm3.h ****  * @version  V3.20
   5:./inc/core_cm3.h ****  * @date     25. February 2013
   6:./inc/core_cm3.h ****  *
   7:./inc/core_cm3.h ****  * @note
   8:./inc/core_cm3.h ****  *
   9:./inc/core_cm3.h ****  ******************************************************************************/
  10:./inc/core_cm3.h **** /* Copyright (c) 2009 - 2013 ARM LIMITED
  11:./inc/core_cm3.h **** 
  12:./inc/core_cm3.h ****    All rights reserved.
  13:./inc/core_cm3.h ****    Redistribution and use in source and binary forms, with or without
  14:./inc/core_cm3.h ****    modification, are permitted provided that the following conditions are met:
  15:./inc/core_cm3.h ****    - Redistributions of source code must retain the above copyright
  16:./inc/core_cm3.h ****      notice, this list of conditions and the following disclaimer.
  17:./inc/core_cm3.h ****    - Redistributions in binary form must reproduce the above copyright
  18:./inc/core_cm3.h ****      notice, this list of conditions and the following disclaimer in the
  19:./inc/core_cm3.h ****      documentation and/or other materials provided with the distribution.
  20:./inc/core_cm3.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:./inc/core_cm3.h ****      to endorse or promote products derived from this software without
  22:./inc/core_cm3.h ****      specific prior written permission.
  23:./inc/core_cm3.h ****    *
  24:./inc/core_cm3.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:./inc/core_cm3.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:./inc/core_cm3.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:./inc/core_cm3.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:./inc/core_cm3.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:./inc/core_cm3.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:./inc/core_cm3.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:./inc/core_cm3.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:./inc/core_cm3.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:./inc/core_cm3.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:./inc/core_cm3.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:./inc/core_cm3.h ****    ---------------------------------------------------------------------------*/
  36:./inc/core_cm3.h **** 
  37:./inc/core_cm3.h **** 
  38:./inc/core_cm3.h **** #if defined ( __ICCARM__ )
  39:./inc/core_cm3.h ****  #pragma system_include  /* treat file as system include file for MISRA check */
  40:./inc/core_cm3.h **** #endif
  41:./inc/core_cm3.h **** 
  42:./inc/core_cm3.h **** #ifdef __cplusplus
  43:./inc/core_cm3.h ****  extern "C" {
  44:./inc/core_cm3.h **** #endif
  45:./inc/core_cm3.h **** 
  46:./inc/core_cm3.h **** #ifndef __CORE_CM3_H_GENERIC
  47:./inc/core_cm3.h **** #define __CORE_CM3_H_GENERIC
  48:./inc/core_cm3.h **** 
  49:./inc/core_cm3.h **** /** \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  50:./inc/core_cm3.h ****   CMSIS violates the following MISRA-C:2004 rules:
  51:./inc/core_cm3.h **** 
  52:./inc/core_cm3.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  53:./inc/core_cm3.h ****      Function definitions in header files are used to allow 'inlining'.
  54:./inc/core_cm3.h **** 
ARM GAS  /tmp/cc2NM2Xt.s 			page 3


  55:./inc/core_cm3.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  56:./inc/core_cm3.h ****      Unions are used for effective representation of core registers.
  57:./inc/core_cm3.h **** 
  58:./inc/core_cm3.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  59:./inc/core_cm3.h ****      Function-like macros are used to allow more efficient code.
  60:./inc/core_cm3.h ****  */
  61:./inc/core_cm3.h **** 
  62:./inc/core_cm3.h **** 
  63:./inc/core_cm3.h **** /*******************************************************************************
  64:./inc/core_cm3.h ****  *                 CMSIS definitions
  65:./inc/core_cm3.h ****  ******************************************************************************/
  66:./inc/core_cm3.h **** /** \ingroup Cortex_M3
  67:./inc/core_cm3.h ****   @{
  68:./inc/core_cm3.h ****  */
  69:./inc/core_cm3.h **** 
  70:./inc/core_cm3.h **** /*  CMSIS CM3 definitions */
  71:./inc/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x03)                                   /*!< [31:16] CMSIS HAL m
  72:./inc/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x20)                                   /*!< [15:0]  CMSIS HAL s
  73:./inc/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | \
  74:./inc/core_cm3.h ****                                     __CM3_CMSIS_VERSION_SUB          )     /*!< CMSIS HAL version n
  75:./inc/core_cm3.h **** 
  76:./inc/core_cm3.h **** #define __CORTEX_M                (0x03)                                   /*!< Cortex-M Core      
  77:./inc/core_cm3.h **** 
  78:./inc/core_cm3.h **** 
  79:./inc/core_cm3.h **** #if   defined ( __CC_ARM )
  80:./inc/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  81:./inc/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  82:./inc/core_cm3.h ****   #define __STATIC_INLINE  static __inline
  83:./inc/core_cm3.h **** 
  84:./inc/core_cm3.h **** #elif defined ( __ICCARM__ )
  85:./inc/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  86:./inc/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
  87:./inc/core_cm3.h ****   #define __STATIC_INLINE  static inline
  88:./inc/core_cm3.h **** 
  89:./inc/core_cm3.h **** #elif defined ( __TMS470__ )
  90:./inc/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
  91:./inc/core_cm3.h ****   #define __STATIC_INLINE  static inline
  92:./inc/core_cm3.h **** 
  93:./inc/core_cm3.h **** #elif defined ( __GNUC__ )
  94:./inc/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  95:./inc/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  96:./inc/core_cm3.h ****   #define __STATIC_INLINE  static inline
  97:./inc/core_cm3.h **** 
  98:./inc/core_cm3.h **** #elif defined ( __TASKING__ )
  99:./inc/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 100:./inc/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 101:./inc/core_cm3.h ****   #define __STATIC_INLINE  static inline
 102:./inc/core_cm3.h **** 
 103:./inc/core_cm3.h **** #endif
 104:./inc/core_cm3.h **** 
 105:./inc/core_cm3.h **** /** __FPU_USED indicates whether an FPU is used or not. This core does not support an FPU at all
 106:./inc/core_cm3.h **** */
 107:./inc/core_cm3.h **** #define __FPU_USED       0
 108:./inc/core_cm3.h **** 
 109:./inc/core_cm3.h **** #if defined ( __CC_ARM )
 110:./inc/core_cm3.h ****   #if defined __TARGET_FPU_VFP
 111:./inc/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
ARM GAS  /tmp/cc2NM2Xt.s 			page 4


 112:./inc/core_cm3.h ****   #endif
 113:./inc/core_cm3.h **** 
 114:./inc/core_cm3.h **** #elif defined ( __ICCARM__ )
 115:./inc/core_cm3.h ****   #if defined __ARMVFP__
 116:./inc/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 117:./inc/core_cm3.h ****   #endif
 118:./inc/core_cm3.h **** 
 119:./inc/core_cm3.h **** #elif defined ( __TMS470__ )
 120:./inc/core_cm3.h ****   #if defined __TI__VFP_SUPPORT____
 121:./inc/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 122:./inc/core_cm3.h ****   #endif
 123:./inc/core_cm3.h **** 
 124:./inc/core_cm3.h **** #elif defined ( __GNUC__ )
 125:./inc/core_cm3.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 126:./inc/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 127:./inc/core_cm3.h ****   #endif
 128:./inc/core_cm3.h **** 
 129:./inc/core_cm3.h **** #elif defined ( __TASKING__ )
 130:./inc/core_cm3.h ****   #if defined __FPU_VFP__
 131:./inc/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 132:./inc/core_cm3.h ****   #endif
 133:./inc/core_cm3.h **** #endif
 134:./inc/core_cm3.h **** 
 135:./inc/core_cm3.h **** #include <stdint.h>                      /* standard types definitions                      */
 136:./inc/core_cm3.h **** #include <core_cmInstr.h>                /* Core Instruction Access                         */
 137:./inc/core_cm3.h **** #include <core_cmFunc.h>                 /* Core Function Access                            */
 138:./inc/core_cm3.h **** 
 139:./inc/core_cm3.h **** #endif /* __CORE_CM3_H_GENERIC */
 140:./inc/core_cm3.h **** 
 141:./inc/core_cm3.h **** #ifndef __CMSIS_GENERIC
 142:./inc/core_cm3.h **** 
 143:./inc/core_cm3.h **** #ifndef __CORE_CM3_H_DEPENDANT
 144:./inc/core_cm3.h **** #define __CORE_CM3_H_DEPENDANT
 145:./inc/core_cm3.h **** 
 146:./inc/core_cm3.h **** /* check device defines and use defaults */
 147:./inc/core_cm3.h **** #if defined __CHECK_DEVICE_DEFINES
 148:./inc/core_cm3.h ****   #ifndef __CM3_REV
 149:./inc/core_cm3.h ****     #define __CM3_REV               0x0200
 150:./inc/core_cm3.h ****     #warning "__CM3_REV not defined in device header file; using default!"
 151:./inc/core_cm3.h ****   #endif
 152:./inc/core_cm3.h **** 
 153:./inc/core_cm3.h ****   #ifndef __MPU_PRESENT
 154:./inc/core_cm3.h ****     #define __MPU_PRESENT             0
 155:./inc/core_cm3.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 156:./inc/core_cm3.h ****   #endif
 157:./inc/core_cm3.h **** 
 158:./inc/core_cm3.h ****   #ifndef __NVIC_PRIO_BITS
 159:./inc/core_cm3.h ****     #define __NVIC_PRIO_BITS          4
 160:./inc/core_cm3.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 161:./inc/core_cm3.h ****   #endif
 162:./inc/core_cm3.h **** 
 163:./inc/core_cm3.h ****   #ifndef __Vendor_SysTickConfig
 164:./inc/core_cm3.h ****     #define __Vendor_SysTickConfig    0
 165:./inc/core_cm3.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 166:./inc/core_cm3.h ****   #endif
 167:./inc/core_cm3.h **** #endif
 168:./inc/core_cm3.h **** 
ARM GAS  /tmp/cc2NM2Xt.s 			page 5


 169:./inc/core_cm3.h **** /* IO definitions (access restrictions to peripheral registers) */
 170:./inc/core_cm3.h **** /**
 171:./inc/core_cm3.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 172:./inc/core_cm3.h **** 
 173:./inc/core_cm3.h ****     <strong>IO Type Qualifiers</strong> are used
 174:./inc/core_cm3.h ****     \li to specify the access to peripheral variables.
 175:./inc/core_cm3.h ****     \li for automatic generation of peripheral register debug information.
 176:./inc/core_cm3.h **** */
 177:./inc/core_cm3.h **** #ifdef __cplusplus
 178:./inc/core_cm3.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions                 */
 179:./inc/core_cm3.h **** #else
 180:./inc/core_cm3.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions                 */
 181:./inc/core_cm3.h **** #endif
 182:./inc/core_cm3.h **** #define     __O     volatile             /*!< Defines 'write only' permissions                */
 183:./inc/core_cm3.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions              */
 184:./inc/core_cm3.h **** 
 185:./inc/core_cm3.h **** /*@} end of group Cortex_M3 */
 186:./inc/core_cm3.h **** 
 187:./inc/core_cm3.h **** 
 188:./inc/core_cm3.h **** 
 189:./inc/core_cm3.h **** /*******************************************************************************
 190:./inc/core_cm3.h ****  *                 Register Abstraction
 191:./inc/core_cm3.h ****   Core Register contain:
 192:./inc/core_cm3.h ****   - Core Register
 193:./inc/core_cm3.h ****   - Core NVIC Register
 194:./inc/core_cm3.h ****   - Core SCB Register
 195:./inc/core_cm3.h ****   - Core SysTick Register
 196:./inc/core_cm3.h ****   - Core Debug Register
 197:./inc/core_cm3.h ****   - Core MPU Register
 198:./inc/core_cm3.h ****  ******************************************************************************/
 199:./inc/core_cm3.h **** /** \defgroup CMSIS_core_register Defines and Type Definitions
 200:./inc/core_cm3.h ****     \brief Type definitions and defines for Cortex-M processor based devices.
 201:./inc/core_cm3.h **** */
 202:./inc/core_cm3.h **** 
 203:./inc/core_cm3.h **** /** \ingroup    CMSIS_core_register
 204:./inc/core_cm3.h ****     \defgroup   CMSIS_CORE  Status and Control Registers
 205:./inc/core_cm3.h ****     \brief  Core Register type definitions.
 206:./inc/core_cm3.h ****   @{
 207:./inc/core_cm3.h ****  */
 208:./inc/core_cm3.h **** 
 209:./inc/core_cm3.h **** /** \brief  Union type to access the Application Program Status Register (APSR).
 210:./inc/core_cm3.h ****  */
 211:./inc/core_cm3.h **** typedef union
 212:./inc/core_cm3.h **** {
 213:./inc/core_cm3.h ****   struct
 214:./inc/core_cm3.h ****   {
 215:./inc/core_cm3.h **** #if (__CORTEX_M != 0x04)
 216:./inc/core_cm3.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved                           */
 217:./inc/core_cm3.h **** #else
 218:./inc/core_cm3.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
 219:./inc/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 220:./inc/core_cm3.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
 221:./inc/core_cm3.h **** #endif
 222:./inc/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 223:./inc/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 224:./inc/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 225:./inc/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
ARM GAS  /tmp/cc2NM2Xt.s 			page 6


 226:./inc/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 227:./inc/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 228:./inc/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 229:./inc/core_cm3.h **** } APSR_Type;
 230:./inc/core_cm3.h **** 
 231:./inc/core_cm3.h **** 
 232:./inc/core_cm3.h **** /** \brief  Union type to access the Interrupt Program Status Register (IPSR).
 233:./inc/core_cm3.h ****  */
 234:./inc/core_cm3.h **** typedef union
 235:./inc/core_cm3.h **** {
 236:./inc/core_cm3.h ****   struct
 237:./inc/core_cm3.h ****   {
 238:./inc/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 239:./inc/core_cm3.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
 240:./inc/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 241:./inc/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 242:./inc/core_cm3.h **** } IPSR_Type;
 243:./inc/core_cm3.h **** 
 244:./inc/core_cm3.h **** 
 245:./inc/core_cm3.h **** /** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:./inc/core_cm3.h ****  */
 247:./inc/core_cm3.h **** typedef union
 248:./inc/core_cm3.h **** {
 249:./inc/core_cm3.h ****   struct
 250:./inc/core_cm3.h ****   {
 251:./inc/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 252:./inc/core_cm3.h **** #if (__CORTEX_M != 0x04)
 253:./inc/core_cm3.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved                           */
 254:./inc/core_cm3.h **** #else
 255:./inc/core_cm3.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
 256:./inc/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 257:./inc/core_cm3.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
 258:./inc/core_cm3.h **** #endif
 259:./inc/core_cm3.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
 260:./inc/core_cm3.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
 261:./inc/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 262:./inc/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 263:./inc/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 264:./inc/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 265:./inc/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 266:./inc/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 267:./inc/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 268:./inc/core_cm3.h **** } xPSR_Type;
 269:./inc/core_cm3.h **** 
 270:./inc/core_cm3.h **** 
 271:./inc/core_cm3.h **** /** \brief  Union type to access the Control Registers (CONTROL).
 272:./inc/core_cm3.h ****  */
 273:./inc/core_cm3.h **** typedef union
 274:./inc/core_cm3.h **** {
 275:./inc/core_cm3.h ****   struct
 276:./inc/core_cm3.h ****   {
 277:./inc/core_cm3.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 278:./inc/core_cm3.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
 279:./inc/core_cm3.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
 280:./inc/core_cm3.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
 281:./inc/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 282:./inc/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
ARM GAS  /tmp/cc2NM2Xt.s 			page 7


 283:./inc/core_cm3.h **** } CONTROL_Type;
 284:./inc/core_cm3.h **** 
 285:./inc/core_cm3.h **** /*@} end of group CMSIS_CORE */
 286:./inc/core_cm3.h **** 
 287:./inc/core_cm3.h **** 
 288:./inc/core_cm3.h **** /** \ingroup    CMSIS_core_register
 289:./inc/core_cm3.h ****     \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 290:./inc/core_cm3.h ****     \brief      Type definitions for the NVIC Registers
 291:./inc/core_cm3.h ****   @{
 292:./inc/core_cm3.h ****  */
 293:./inc/core_cm3.h **** 
 294:./inc/core_cm3.h **** /** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 295:./inc/core_cm3.h ****  */
 296:./inc/core_cm3.h **** typedef struct
 297:./inc/core_cm3.h **** {
 298:./inc/core_cm3.h ****   __IO uint32_t ISER[8];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register   
 299:./inc/core_cm3.h ****        uint32_t RESERVED0[24];
 300:./inc/core_cm3.h ****   __IO uint32_t ICER[8];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 301:./inc/core_cm3.h ****        uint32_t RSERVED1[24];
 302:./inc/core_cm3.h ****   __IO uint32_t ISPR[8];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register  
 303:./inc/core_cm3.h ****        uint32_t RESERVED2[24];
 304:./inc/core_cm3.h ****   __IO uint32_t ICPR[8];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 305:./inc/core_cm3.h ****        uint32_t RESERVED3[24];
 306:./inc/core_cm3.h ****   __IO uint32_t IABR[8];                 /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register   
 307:./inc/core_cm3.h ****        uint32_t RESERVED4[56];
 308:./inc/core_cm3.h ****   __IO uint8_t  IP[240];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 309:./inc/core_cm3.h ****        uint32_t RESERVED5[644];
 310:./inc/core_cm3.h ****   __O  uint32_t STIR;                    /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 311:./inc/core_cm3.h **** }  NVIC_Type;
 312:./inc/core_cm3.h **** 
 313:./inc/core_cm3.h **** /* Software Triggered Interrupt Register Definitions */
 314:./inc/core_cm3.h **** #define NVIC_STIR_INTID_Pos                 0                                          /*!< STIR: I
 315:./inc/core_cm3.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL << NVIC_STIR_INTID_Pos)            /*!< STIR: I
 316:./inc/core_cm3.h **** 
 317:./inc/core_cm3.h **** /*@} end of group CMSIS_NVIC */
 318:./inc/core_cm3.h **** 
 319:./inc/core_cm3.h **** 
 320:./inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 321:./inc/core_cm3.h ****     \defgroup CMSIS_SCB     System Control Block (SCB)
 322:./inc/core_cm3.h ****     \brief      Type definitions for the System Control Block Registers
 323:./inc/core_cm3.h ****   @{
 324:./inc/core_cm3.h ****  */
 325:./inc/core_cm3.h **** 
 326:./inc/core_cm3.h **** /** \brief  Structure type to access the System Control Block (SCB).
 327:./inc/core_cm3.h ****  */
 328:./inc/core_cm3.h **** typedef struct
 329:./inc/core_cm3.h **** {
 330:./inc/core_cm3.h ****   __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPUID Base Register             
 331:./inc/core_cm3.h ****   __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 332:./inc/core_cm3.h ****   __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register    
 333:./inc/core_cm3.h ****   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 334:./inc/core_cm3.h ****   __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register         
 335:./inc/core_cm3.h ****   __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register  
 336:./inc/core_cm3.h ****   __IO uint8_t  SHP[12];                 /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 337:./inc/core_cm3.h ****   __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State
 338:./inc/core_cm3.h ****   __IO uint32_t CFSR;                    /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 339:./inc/core_cm3.h ****   __IO uint32_t HFSR;                    /*!< Offset: 0x02C (R/W)  HardFault Status Register       
ARM GAS  /tmp/cc2NM2Xt.s 			page 8


 340:./inc/core_cm3.h ****   __IO uint32_t DFSR;                    /*!< Offset: 0x030 (R/W)  Debug Fault Status Register     
 341:./inc/core_cm3.h ****   __IO uint32_t MMFAR;                   /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 342:./inc/core_cm3.h ****   __IO uint32_t BFAR;                    /*!< Offset: 0x038 (R/W)  BusFault Address Register       
 343:./inc/core_cm3.h ****   __IO uint32_t AFSR;                    /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 344:./inc/core_cm3.h ****   __I  uint32_t PFR[2];                  /*!< Offset: 0x040 (R/ )  Processor Feature Register      
 345:./inc/core_cm3.h ****   __I  uint32_t DFR;                     /*!< Offset: 0x048 (R/ )  Debug Feature Register          
 346:./inc/core_cm3.h ****   __I  uint32_t ADR;                     /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register      
 347:./inc/core_cm3.h ****   __I  uint32_t MMFR[4];                 /*!< Offset: 0x050 (R/ )  Memory Model Feature Register   
 348:./inc/core_cm3.h ****   __I  uint32_t ISAR[5];                 /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 349:./inc/core_cm3.h ****        uint32_t RESERVED0[5];
 350:./inc/core_cm3.h ****   __IO uint32_t CPACR;                   /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 351:./inc/core_cm3.h **** } SCB_Type;
 352:./inc/core_cm3.h **** 
 353:./inc/core_cm3.h **** /* SCB CPUID Register Definitions */
 354:./inc/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 355:./inc/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 356:./inc/core_cm3.h **** 
 357:./inc/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 358:./inc/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 359:./inc/core_cm3.h **** 
 360:./inc/core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 361:./inc/core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 362:./inc/core_cm3.h **** 
 363:./inc/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 364:./inc/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 365:./inc/core_cm3.h **** 
 366:./inc/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 367:./inc/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 368:./inc/core_cm3.h **** 
 369:./inc/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 370:./inc/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 371:./inc/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 372:./inc/core_cm3.h **** 
 373:./inc/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 374:./inc/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 375:./inc/core_cm3.h **** 
 376:./inc/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 377:./inc/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 378:./inc/core_cm3.h **** 
 379:./inc/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 380:./inc/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 381:./inc/core_cm3.h **** 
 382:./inc/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 383:./inc/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 384:./inc/core_cm3.h **** 
 385:./inc/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 386:./inc/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 387:./inc/core_cm3.h **** 
 388:./inc/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 389:./inc/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 390:./inc/core_cm3.h **** 
 391:./inc/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 392:./inc/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 393:./inc/core_cm3.h **** 
 394:./inc/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 395:./inc/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 396:./inc/core_cm3.h **** 
ARM GAS  /tmp/cc2NM2Xt.s 			page 9


 397:./inc/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 398:./inc/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 399:./inc/core_cm3.h **** 
 400:./inc/core_cm3.h **** /* SCB Vector Table Offset Register Definitions */
 401:./inc/core_cm3.h **** #if (__CM3_REV < 0x0201)                   /* core r2p1 */
 402:./inc/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29                                             /*!< SCB 
 403:./inc/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (1UL << SCB_VTOR_TBLBASE_Pos)                  /*!< SCB 
 404:./inc/core_cm3.h **** 
 405:./inc/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 406:./inc/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 407:./inc/core_cm3.h **** #else
 408:./inc/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 409:./inc/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 410:./inc/core_cm3.h **** #endif
 411:./inc/core_cm3.h **** 
 412:./inc/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 413:./inc/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 414:./inc/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 415:./inc/core_cm3.h **** 
 416:./inc/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 417:./inc/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 418:./inc/core_cm3.h **** 
 419:./inc/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 420:./inc/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 421:./inc/core_cm3.h **** 
 422:./inc/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 423:./inc/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 424:./inc/core_cm3.h **** 
 425:./inc/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 426:./inc/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 427:./inc/core_cm3.h **** 
 428:./inc/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 429:./inc/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 430:./inc/core_cm3.h **** 
 431:./inc/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 432:./inc/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 433:./inc/core_cm3.h **** 
 434:./inc/core_cm3.h **** /* SCB System Control Register Definitions */
 435:./inc/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 436:./inc/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 437:./inc/core_cm3.h **** 
 438:./inc/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 439:./inc/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 440:./inc/core_cm3.h **** 
 441:./inc/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 442:./inc/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 443:./inc/core_cm3.h **** 
 444:./inc/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 445:./inc/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 446:./inc/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 447:./inc/core_cm3.h **** 
 448:./inc/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 449:./inc/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 450:./inc/core_cm3.h **** 
 451:./inc/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 452:./inc/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 453:./inc/core_cm3.h **** 
ARM GAS  /tmp/cc2NM2Xt.s 			page 10


 454:./inc/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 455:./inc/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 456:./inc/core_cm3.h **** 
 457:./inc/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 458:./inc/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 459:./inc/core_cm3.h **** 
 460:./inc/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 461:./inc/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 462:./inc/core_cm3.h **** 
 463:./inc/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 464:./inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 465:./inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 466:./inc/core_cm3.h **** 
 467:./inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 468:./inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 469:./inc/core_cm3.h **** 
 470:./inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 471:./inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 472:./inc/core_cm3.h **** 
 473:./inc/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 474:./inc/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 475:./inc/core_cm3.h **** 
 476:./inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 477:./inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 478:./inc/core_cm3.h **** 
 479:./inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 480:./inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 481:./inc/core_cm3.h **** 
 482:./inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 483:./inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 484:./inc/core_cm3.h **** 
 485:./inc/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 486:./inc/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 487:./inc/core_cm3.h **** 
 488:./inc/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 489:./inc/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 490:./inc/core_cm3.h **** 
 491:./inc/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 492:./inc/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 493:./inc/core_cm3.h **** 
 494:./inc/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 495:./inc/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 496:./inc/core_cm3.h **** 
 497:./inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 498:./inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 499:./inc/core_cm3.h **** 
 500:./inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 501:./inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 502:./inc/core_cm3.h **** 
 503:./inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 504:./inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 505:./inc/core_cm3.h **** 
 506:./inc/core_cm3.h **** /* SCB Configurable Fault Status Registers Definitions */
 507:./inc/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 508:./inc/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 509:./inc/core_cm3.h **** 
 510:./inc/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
ARM GAS  /tmp/cc2NM2Xt.s 			page 11


 511:./inc/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 512:./inc/core_cm3.h **** 
 513:./inc/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 514:./inc/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 515:./inc/core_cm3.h **** 
 516:./inc/core_cm3.h **** /* SCB Hard Fault Status Registers Definitions */
 517:./inc/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 518:./inc/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 519:./inc/core_cm3.h **** 
 520:./inc/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 521:./inc/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 522:./inc/core_cm3.h **** 
 523:./inc/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 524:./inc/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 525:./inc/core_cm3.h **** 
 526:./inc/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 527:./inc/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 528:./inc/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 529:./inc/core_cm3.h **** 
 530:./inc/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 531:./inc/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 532:./inc/core_cm3.h **** 
 533:./inc/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 534:./inc/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 535:./inc/core_cm3.h **** 
 536:./inc/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 537:./inc/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 538:./inc/core_cm3.h **** 
 539:./inc/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 540:./inc/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1UL << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 541:./inc/core_cm3.h **** 
 542:./inc/core_cm3.h **** /*@} end of group CMSIS_SCB */
 543:./inc/core_cm3.h **** 
 544:./inc/core_cm3.h **** 
 545:./inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 546:./inc/core_cm3.h ****     \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 547:./inc/core_cm3.h ****     \brief      Type definitions for the System Control and ID Register not in the SCB
 548:./inc/core_cm3.h ****   @{
 549:./inc/core_cm3.h ****  */
 550:./inc/core_cm3.h **** 
 551:./inc/core_cm3.h **** /** \brief  Structure type to access the System Control and ID Register not in the SCB.
 552:./inc/core_cm3.h ****  */
 553:./inc/core_cm3.h **** typedef struct
 554:./inc/core_cm3.h **** {
 555:./inc/core_cm3.h ****        uint32_t RESERVED0[1];
 556:./inc/core_cm3.h ****   __I  uint32_t ICTR;                    /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 557:./inc/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 558:./inc/core_cm3.h ****   __IO uint32_t ACTLR;                   /*!< Offset: 0x008 (R/W)  Auxiliary Control Register      
 559:./inc/core_cm3.h **** #else
 560:./inc/core_cm3.h ****        uint32_t RESERVED1[1];
 561:./inc/core_cm3.h **** #endif
 562:./inc/core_cm3.h **** } SCnSCB_Type;
 563:./inc/core_cm3.h **** 
 564:./inc/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 565:./inc/core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0                                          /*!< ICTR: I
 566:./inc/core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL << SCnSCB_ICTR_INTLINESNUM_Pos)      /*!< ICTR: I
 567:./inc/core_cm3.h **** 
ARM GAS  /tmp/cc2NM2Xt.s 			page 12


 568:./inc/core_cm3.h **** /* Auxiliary Control Register Definitions */
 569:./inc/core_cm3.h **** 
 570:./inc/core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2                                          /*!< ACTLR: 
 571:./inc/core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 572:./inc/core_cm3.h **** 
 573:./inc/core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1                                          /*!< ACTLR: 
 574:./inc/core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 575:./inc/core_cm3.h **** 
 576:./inc/core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0                                          /*!< ACTLR: 
 577:./inc/core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL << SCnSCB_ACTLR_DISMCYCINT_Pos)        /*!< ACTLR: 
 578:./inc/core_cm3.h **** 
 579:./inc/core_cm3.h **** /*@} end of group CMSIS_SCnotSCB */
 580:./inc/core_cm3.h **** 
 581:./inc/core_cm3.h **** 
 582:./inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 583:./inc/core_cm3.h ****     \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 584:./inc/core_cm3.h ****     \brief      Type definitions for the System Timer Registers.
 585:./inc/core_cm3.h ****   @{
 586:./inc/core_cm3.h ****  */
 587:./inc/core_cm3.h **** 
 588:./inc/core_cm3.h **** /** \brief  Structure type to access the System Timer (SysTick).
 589:./inc/core_cm3.h ****  */
 590:./inc/core_cm3.h **** typedef struct
 591:./inc/core_cm3.h **** {
 592:./inc/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 593:./inc/core_cm3.h ****   __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register   
 594:./inc/core_cm3.h ****   __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register  
 595:./inc/core_cm3.h ****   __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register    
 596:./inc/core_cm3.h **** } SysTick_Type;
 597:./inc/core_cm3.h **** 
 598:./inc/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 599:./inc/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 600:./inc/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 601:./inc/core_cm3.h **** 
 602:./inc/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 603:./inc/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 604:./inc/core_cm3.h **** 
 605:./inc/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 606:./inc/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 607:./inc/core_cm3.h **** 
 608:./inc/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 609:./inc/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 610:./inc/core_cm3.h **** 
 611:./inc/core_cm3.h **** /* SysTick Reload Register Definitions */
 612:./inc/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 613:./inc/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 614:./inc/core_cm3.h **** 
 615:./inc/core_cm3.h **** /* SysTick Current Register Definitions */
 616:./inc/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 617:./inc/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 618:./inc/core_cm3.h **** 
 619:./inc/core_cm3.h **** /* SysTick Calibration Register Definitions */
 620:./inc/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 621:./inc/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 622:./inc/core_cm3.h **** 
 623:./inc/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 624:./inc/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
ARM GAS  /tmp/cc2NM2Xt.s 			page 13


 625:./inc/core_cm3.h **** 
 626:./inc/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 627:./inc/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 628:./inc/core_cm3.h **** 
 629:./inc/core_cm3.h **** /*@} end of group CMSIS_SysTick */
 630:./inc/core_cm3.h **** 
 631:./inc/core_cm3.h **** 
 632:./inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 633:./inc/core_cm3.h ****     \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 634:./inc/core_cm3.h ****     \brief      Type definitions for the Instrumentation Trace Macrocell (ITM)
 635:./inc/core_cm3.h ****   @{
 636:./inc/core_cm3.h ****  */
 637:./inc/core_cm3.h **** 
 638:./inc/core_cm3.h **** /** \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 639:./inc/core_cm3.h ****  */
 640:./inc/core_cm3.h **** typedef struct
 641:./inc/core_cm3.h **** {
 642:./inc/core_cm3.h ****   __O  union
 643:./inc/core_cm3.h ****   {
 644:./inc/core_cm3.h ****     __O  uint8_t    u8;                  /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit         
 645:./inc/core_cm3.h ****     __O  uint16_t   u16;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit        
 646:./inc/core_cm3.h ****     __O  uint32_t   u32;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit        
 647:./inc/core_cm3.h ****   }  PORT [32];                          /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers     
 648:./inc/core_cm3.h ****        uint32_t RESERVED0[864];
 649:./inc/core_cm3.h ****   __IO uint32_t TER;                     /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register       
 650:./inc/core_cm3.h ****        uint32_t RESERVED1[15];
 651:./inc/core_cm3.h ****   __IO uint32_t TPR;                     /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register    
 652:./inc/core_cm3.h ****        uint32_t RESERVED2[15];
 653:./inc/core_cm3.h ****   __IO uint32_t TCR;                     /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register      
 654:./inc/core_cm3.h ****        uint32_t RESERVED3[29];
 655:./inc/core_cm3.h ****   __O  uint32_t IWR;                     /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register  
 656:./inc/core_cm3.h ****   __I  uint32_t IRR;                     /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register   
 657:./inc/core_cm3.h ****   __IO uint32_t IMCR;                    /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 658:./inc/core_cm3.h ****        uint32_t RESERVED4[43];
 659:./inc/core_cm3.h ****   __O  uint32_t LAR;                     /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register        
 660:./inc/core_cm3.h ****   __I  uint32_t LSR;                     /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register        
 661:./inc/core_cm3.h ****        uint32_t RESERVED5[6];
 662:./inc/core_cm3.h ****   __I  uint32_t PID4;                    /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 663:./inc/core_cm3.h ****   __I  uint32_t PID5;                    /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 664:./inc/core_cm3.h ****   __I  uint32_t PID6;                    /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 665:./inc/core_cm3.h ****   __I  uint32_t PID7;                    /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 666:./inc/core_cm3.h ****   __I  uint32_t PID0;                    /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 667:./inc/core_cm3.h ****   __I  uint32_t PID1;                    /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 668:./inc/core_cm3.h ****   __I  uint32_t PID2;                    /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 669:./inc/core_cm3.h ****   __I  uint32_t PID3;                    /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 670:./inc/core_cm3.h ****   __I  uint32_t CID0;                    /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 671:./inc/core_cm3.h ****   __I  uint32_t CID1;                    /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 672:./inc/core_cm3.h ****   __I  uint32_t CID2;                    /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 673:./inc/core_cm3.h ****   __I  uint32_t CID3;                    /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 674:./inc/core_cm3.h **** } ITM_Type;
 675:./inc/core_cm3.h **** 
 676:./inc/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 677:./inc/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM 
 678:./inc/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL << ITM_TPR_PRIVMASK_Pos)                /*!< ITM 
 679:./inc/core_cm3.h **** 
 680:./inc/core_cm3.h **** /* ITM Trace Control Register Definitions */
 681:./inc/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM 
ARM GAS  /tmp/cc2NM2Xt.s 			page 14


 682:./inc/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 683:./inc/core_cm3.h **** 
 684:./inc/core_cm3.h **** #define ITM_TCR_TraceBusID_Pos             16                                             /*!< ITM 
 685:./inc/core_cm3.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 686:./inc/core_cm3.h **** 
 687:./inc/core_cm3.h **** #define ITM_TCR_GTSFREQ_Pos                10                                             /*!< ITM 
 688:./inc/core_cm3.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 689:./inc/core_cm3.h **** 
 690:./inc/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM 
 691:./inc/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 692:./inc/core_cm3.h **** 
 693:./inc/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM 
 694:./inc/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 695:./inc/core_cm3.h **** 
 696:./inc/core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM 
 697:./inc/core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 698:./inc/core_cm3.h **** 
 699:./inc/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM 
 700:./inc/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 701:./inc/core_cm3.h **** 
 702:./inc/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM 
 703:./inc/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 704:./inc/core_cm3.h **** 
 705:./inc/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM 
 706:./inc/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1UL << ITM_TCR_ITMENA_Pos)                    /*!< ITM 
 707:./inc/core_cm3.h **** 
 708:./inc/core_cm3.h **** /* ITM Integration Write Register Definitions */
 709:./inc/core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM 
 710:./inc/core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL << ITM_IWR_ATVALIDM_Pos)                  /*!< ITM 
 711:./inc/core_cm3.h **** 
 712:./inc/core_cm3.h **** /* ITM Integration Read Register Definitions */
 713:./inc/core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM 
 714:./inc/core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1UL << ITM_IRR_ATREADYM_Pos)                  /*!< ITM 
 715:./inc/core_cm3.h **** 
 716:./inc/core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 717:./inc/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM 
 718:./inc/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL << ITM_IMCR_INTEGRATION_Pos)              /*!< ITM 
 719:./inc/core_cm3.h **** 
 720:./inc/core_cm3.h **** /* ITM Lock Status Register Definitions */
 721:./inc/core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM 
 722:./inc/core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 723:./inc/core_cm3.h **** 
 724:./inc/core_cm3.h **** #define ITM_LSR_Access_Pos                  1                                             /*!< ITM 
 725:./inc/core_cm3.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 726:./inc/core_cm3.h **** 
 727:./inc/core_cm3.h **** #define ITM_LSR_Present_Pos                 0                                             /*!< ITM 
 728:./inc/core_cm3.h **** #define ITM_LSR_Present_Msk                (1UL << ITM_LSR_Present_Pos)                   /*!< ITM 
 729:./inc/core_cm3.h **** 
 730:./inc/core_cm3.h **** /*@}*/ /* end of group CMSIS_ITM */
 731:./inc/core_cm3.h **** 
 732:./inc/core_cm3.h **** 
 733:./inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 734:./inc/core_cm3.h ****     \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 735:./inc/core_cm3.h ****     \brief      Type definitions for the Data Watchpoint and Trace (DWT)
 736:./inc/core_cm3.h ****   @{
 737:./inc/core_cm3.h ****  */
 738:./inc/core_cm3.h **** 
ARM GAS  /tmp/cc2NM2Xt.s 			page 15


 739:./inc/core_cm3.h **** /** \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 740:./inc/core_cm3.h ****  */
 741:./inc/core_cm3.h **** typedef struct
 742:./inc/core_cm3.h **** {
 743:./inc/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  Control Register                
 744:./inc/core_cm3.h ****   __IO uint32_t CYCCNT;                  /*!< Offset: 0x004 (R/W)  Cycle Count Register            
 745:./inc/core_cm3.h ****   __IO uint32_t CPICNT;                  /*!< Offset: 0x008 (R/W)  CPI Count Register              
 746:./inc/core_cm3.h ****   __IO uint32_t EXCCNT;                  /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 747:./inc/core_cm3.h ****   __IO uint32_t SLEEPCNT;                /*!< Offset: 0x010 (R/W)  Sleep Count Register            
 748:./inc/core_cm3.h ****   __IO uint32_t LSUCNT;                  /*!< Offset: 0x014 (R/W)  LSU Count Register              
 749:./inc/core_cm3.h ****   __IO uint32_t FOLDCNT;                 /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 750:./inc/core_cm3.h ****   __I  uint32_t PCSR;                    /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 751:./inc/core_cm3.h ****   __IO uint32_t COMP0;                   /*!< Offset: 0x020 (R/W)  Comparator Register 0           
 752:./inc/core_cm3.h ****   __IO uint32_t MASK0;                   /*!< Offset: 0x024 (R/W)  Mask Register 0                 
 753:./inc/core_cm3.h ****   __IO uint32_t FUNCTION0;               /*!< Offset: 0x028 (R/W)  Function Register 0             
 754:./inc/core_cm3.h ****        uint32_t RESERVED0[1];
 755:./inc/core_cm3.h ****   __IO uint32_t COMP1;                   /*!< Offset: 0x030 (R/W)  Comparator Register 1           
 756:./inc/core_cm3.h ****   __IO uint32_t MASK1;                   /*!< Offset: 0x034 (R/W)  Mask Register 1                 
 757:./inc/core_cm3.h ****   __IO uint32_t FUNCTION1;               /*!< Offset: 0x038 (R/W)  Function Register 1             
 758:./inc/core_cm3.h ****        uint32_t RESERVED1[1];
 759:./inc/core_cm3.h ****   __IO uint32_t COMP2;                   /*!< Offset: 0x040 (R/W)  Comparator Register 2           
 760:./inc/core_cm3.h ****   __IO uint32_t MASK2;                   /*!< Offset: 0x044 (R/W)  Mask Register 2                 
 761:./inc/core_cm3.h ****   __IO uint32_t FUNCTION2;               /*!< Offset: 0x048 (R/W)  Function Register 2             
 762:./inc/core_cm3.h ****        uint32_t RESERVED2[1];
 763:./inc/core_cm3.h ****   __IO uint32_t COMP3;                   /*!< Offset: 0x050 (R/W)  Comparator Register 3           
 764:./inc/core_cm3.h ****   __IO uint32_t MASK3;                   /*!< Offset: 0x054 (R/W)  Mask Register 3                 
 765:./inc/core_cm3.h ****   __IO uint32_t FUNCTION3;               /*!< Offset: 0x058 (R/W)  Function Register 3             
 766:./inc/core_cm3.h **** } DWT_Type;
 767:./inc/core_cm3.h **** 
 768:./inc/core_cm3.h **** /* DWT Control Register Definitions */
 769:./inc/core_cm3.h **** #define DWT_CTRL_NUMCOMP_Pos               28                                          /*!< DWT CTR
 770:./inc/core_cm3.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 771:./inc/core_cm3.h **** 
 772:./inc/core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Pos              27                                          /*!< DWT CTR
 773:./inc/core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 774:./inc/core_cm3.h **** 
 775:./inc/core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26                                          /*!< DWT CTR
 776:./inc/core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 777:./inc/core_cm3.h **** 
 778:./inc/core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Pos              25                                          /*!< DWT CTR
 779:./inc/core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 780:./inc/core_cm3.h **** 
 781:./inc/core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Pos              24                                          /*!< DWT CTR
 782:./inc/core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 783:./inc/core_cm3.h **** 
 784:./inc/core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Pos             22                                          /*!< DWT CTR
 785:./inc/core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 786:./inc/core_cm3.h **** 
 787:./inc/core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21                                          /*!< DWT CTR
 788:./inc/core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 789:./inc/core_cm3.h **** 
 790:./inc/core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Pos             20                                          /*!< DWT CTR
 791:./inc/core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 792:./inc/core_cm3.h **** 
 793:./inc/core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19                                          /*!< DWT CTR
 794:./inc/core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 795:./inc/core_cm3.h **** 
ARM GAS  /tmp/cc2NM2Xt.s 			page 16


 796:./inc/core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Pos             18                                          /*!< DWT CTR
 797:./inc/core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 798:./inc/core_cm3.h **** 
 799:./inc/core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Pos             17                                          /*!< DWT CTR
 800:./inc/core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 801:./inc/core_cm3.h **** 
 802:./inc/core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Pos             16                                          /*!< DWT CTR
 803:./inc/core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 804:./inc/core_cm3.h **** 
 805:./inc/core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12                                          /*!< DWT CTR
 806:./inc/core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 807:./inc/core_cm3.h **** 
 808:./inc/core_cm3.h **** #define DWT_CTRL_SYNCTAP_Pos               10                                          /*!< DWT CTR
 809:./inc/core_cm3.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 810:./inc/core_cm3.h **** 
 811:./inc/core_cm3.h **** #define DWT_CTRL_CYCTAP_Pos                 9                                          /*!< DWT CTR
 812:./inc/core_cm3.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 813:./inc/core_cm3.h **** 
 814:./inc/core_cm3.h **** #define DWT_CTRL_POSTINIT_Pos               5                                          /*!< DWT CTR
 815:./inc/core_cm3.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 816:./inc/core_cm3.h **** 
 817:./inc/core_cm3.h **** #define DWT_CTRL_POSTPRESET_Pos             1                                          /*!< DWT CTR
 818:./inc/core_cm3.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 819:./inc/core_cm3.h **** 
 820:./inc/core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Pos              0                                          /*!< DWT CTR
 821:./inc/core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL << DWT_CTRL_CYCCNTENA_Pos)           /*!< DWT CTR
 822:./inc/core_cm3.h **** 
 823:./inc/core_cm3.h **** /* DWT CPI Count Register Definitions */
 824:./inc/core_cm3.h **** #define DWT_CPICNT_CPICNT_Pos               0                                          /*!< DWT CPI
 825:./inc/core_cm3.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL << DWT_CPICNT_CPICNT_Pos)           /*!< DWT CPI
 826:./inc/core_cm3.h **** 
 827:./inc/core_cm3.h **** /* DWT Exception Overhead Count Register Definitions */
 828:./inc/core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Pos               0                                          /*!< DWT EXC
 829:./inc/core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL << DWT_EXCCNT_EXCCNT_Pos)           /*!< DWT EXC
 830:./inc/core_cm3.h **** 
 831:./inc/core_cm3.h **** /* DWT Sleep Count Register Definitions */
 832:./inc/core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0                                          /*!< DWT SLE
 833:./inc/core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL << DWT_SLEEPCNT_SLEEPCNT_Pos)       /*!< DWT SLE
 834:./inc/core_cm3.h **** 
 835:./inc/core_cm3.h **** /* DWT LSU Count Register Definitions */
 836:./inc/core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Pos               0                                          /*!< DWT LSU
 837:./inc/core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL << DWT_LSUCNT_LSUCNT_Pos)           /*!< DWT LSU
 838:./inc/core_cm3.h **** 
 839:./inc/core_cm3.h **** /* DWT Folded-instruction Count Register Definitions */
 840:./inc/core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0                                          /*!< DWT FOL
 841:./inc/core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL << DWT_FOLDCNT_FOLDCNT_Pos)         /*!< DWT FOL
 842:./inc/core_cm3.h **** 
 843:./inc/core_cm3.h **** /* DWT Comparator Mask Register Definitions */
 844:./inc/core_cm3.h **** #define DWT_MASK_MASK_Pos                   0                                          /*!< DWT MAS
 845:./inc/core_cm3.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL << DWT_MASK_MASK_Pos)               /*!< DWT MAS
 846:./inc/core_cm3.h **** 
 847:./inc/core_cm3.h **** /* DWT Comparator Function Register Definitions */
 848:./inc/core_cm3.h **** #define DWT_FUNCTION_MATCHED_Pos           24                                          /*!< DWT FUN
 849:./inc/core_cm3.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
 850:./inc/core_cm3.h **** 
 851:./inc/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16                                          /*!< DWT FUN
 852:./inc/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
ARM GAS  /tmp/cc2NM2Xt.s 			page 17


 853:./inc/core_cm3.h **** 
 854:./inc/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12                                          /*!< DWT FUN
 855:./inc/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
 856:./inc/core_cm3.h **** 
 857:./inc/core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10                                          /*!< DWT FUN
 858:./inc/core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
 859:./inc/core_cm3.h **** 
 860:./inc/core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9                                          /*!< DWT FUN
 861:./inc/core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
 862:./inc/core_cm3.h **** 
 863:./inc/core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8                                          /*!< DWT FUN
 864:./inc/core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
 865:./inc/core_cm3.h **** 
 866:./inc/core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7                                          /*!< DWT FUN
 867:./inc/core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
 868:./inc/core_cm3.h **** 
 869:./inc/core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5                                          /*!< DWT FUN
 870:./inc/core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
 871:./inc/core_cm3.h **** 
 872:./inc/core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Pos           0                                          /*!< DWT FUN
 873:./inc/core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL << DWT_FUNCTION_FUNCTION_Pos)        /*!< DWT FUN
 874:./inc/core_cm3.h **** 
 875:./inc/core_cm3.h **** /*@}*/ /* end of group CMSIS_DWT */
 876:./inc/core_cm3.h **** 
 877:./inc/core_cm3.h **** 
 878:./inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 879:./inc/core_cm3.h ****     \defgroup CMSIS_TPI     Trace Port Interface (TPI)
 880:./inc/core_cm3.h ****     \brief      Type definitions for the Trace Port Interface (TPI)
 881:./inc/core_cm3.h ****   @{
 882:./inc/core_cm3.h ****  */
 883:./inc/core_cm3.h **** 
 884:./inc/core_cm3.h **** /** \brief  Structure type to access the Trace Port Interface Register (TPI).
 885:./inc/core_cm3.h ****  */
 886:./inc/core_cm3.h **** typedef struct
 887:./inc/core_cm3.h **** {
 888:./inc/core_cm3.h ****   __IO uint32_t SSPSR;                   /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
 889:./inc/core_cm3.h ****   __IO uint32_t CSPSR;                   /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
 890:./inc/core_cm3.h ****        uint32_t RESERVED0[2];
 891:./inc/core_cm3.h ****   __IO uint32_t ACPR;                    /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
 892:./inc/core_cm3.h ****        uint32_t RESERVED1[55];
 893:./inc/core_cm3.h ****   __IO uint32_t SPPR;                    /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
 894:./inc/core_cm3.h ****        uint32_t RESERVED2[131];
 895:./inc/core_cm3.h ****   __I  uint32_t FFSR;                    /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
 896:./inc/core_cm3.h ****   __IO uint32_t FFCR;                    /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
 897:./inc/core_cm3.h ****   __I  uint32_t FSCR;                    /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
 898:./inc/core_cm3.h ****        uint32_t RESERVED3[759];
 899:./inc/core_cm3.h ****   __I  uint32_t TRIGGER;                 /*!< Offset: 0xEE8 (R/ )  TRIGGER */
 900:./inc/core_cm3.h ****   __I  uint32_t FIFO0;                   /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
 901:./inc/core_cm3.h ****   __I  uint32_t ITATBCTR2;               /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
 902:./inc/core_cm3.h ****        uint32_t RESERVED4[1];
 903:./inc/core_cm3.h ****   __I  uint32_t ITATBCTR0;               /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
 904:./inc/core_cm3.h ****   __I  uint32_t FIFO1;                   /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
 905:./inc/core_cm3.h ****   __IO uint32_t ITCTRL;                  /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
 906:./inc/core_cm3.h ****        uint32_t RESERVED5[39];
 907:./inc/core_cm3.h ****   __IO uint32_t CLAIMSET;                /*!< Offset: 0xFA0 (R/W)  Claim tag set */
 908:./inc/core_cm3.h ****   __IO uint32_t CLAIMCLR;                /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
 909:./inc/core_cm3.h ****        uint32_t RESERVED7[8];
ARM GAS  /tmp/cc2NM2Xt.s 			page 18


 910:./inc/core_cm3.h ****   __I  uint32_t DEVID;                   /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
 911:./inc/core_cm3.h ****   __I  uint32_t DEVTYPE;                 /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
 912:./inc/core_cm3.h **** } TPI_Type;
 913:./inc/core_cm3.h **** 
 914:./inc/core_cm3.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
 915:./inc/core_cm3.h **** #define TPI_ACPR_PRESCALER_Pos              0                                          /*!< TPI ACP
 916:./inc/core_cm3.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL << TPI_ACPR_PRESCALER_Pos)        /*!< TPI ACP
 917:./inc/core_cm3.h **** 
 918:./inc/core_cm3.h **** /* TPI Selected Pin Protocol Register Definitions */
 919:./inc/core_cm3.h **** #define TPI_SPPR_TXMODE_Pos                 0                                          /*!< TPI SPP
 920:./inc/core_cm3.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL << TPI_SPPR_TXMODE_Pos)              /*!< TPI SPP
 921:./inc/core_cm3.h **** 
 922:./inc/core_cm3.h **** /* TPI Formatter and Flush Status Register Definitions */
 923:./inc/core_cm3.h **** #define TPI_FFSR_FtNonStop_Pos              3                                          /*!< TPI FFS
 924:./inc/core_cm3.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
 925:./inc/core_cm3.h **** 
 926:./inc/core_cm3.h **** #define TPI_FFSR_TCPresent_Pos              2                                          /*!< TPI FFS
 927:./inc/core_cm3.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
 928:./inc/core_cm3.h **** 
 929:./inc/core_cm3.h **** #define TPI_FFSR_FtStopped_Pos              1                                          /*!< TPI FFS
 930:./inc/core_cm3.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
 931:./inc/core_cm3.h **** 
 932:./inc/core_cm3.h **** #define TPI_FFSR_FlInProg_Pos               0                                          /*!< TPI FFS
 933:./inc/core_cm3.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL << TPI_FFSR_FlInProg_Pos)            /*!< TPI FFS
 934:./inc/core_cm3.h **** 
 935:./inc/core_cm3.h **** /* TPI Formatter and Flush Control Register Definitions */
 936:./inc/core_cm3.h **** #define TPI_FFCR_TrigIn_Pos                 8                                          /*!< TPI FFC
 937:./inc/core_cm3.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
 938:./inc/core_cm3.h **** 
 939:./inc/core_cm3.h **** #define TPI_FFCR_EnFCont_Pos                1                                          /*!< TPI FFC
 940:./inc/core_cm3.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
 941:./inc/core_cm3.h **** 
 942:./inc/core_cm3.h **** /* TPI TRIGGER Register Definitions */
 943:./inc/core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Pos             0                                          /*!< TPI TRI
 944:./inc/core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL << TPI_TRIGGER_TRIGGER_Pos)          /*!< TPI TRI
 945:./inc/core_cm3.h **** 
 946:./inc/core_cm3.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
 947:./inc/core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29                                          /*!< TPI FIF
 948:./inc/core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
 949:./inc/core_cm3.h **** 
 950:./inc/core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27                                          /*!< TPI FIF
 951:./inc/core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
 952:./inc/core_cm3.h **** 
 953:./inc/core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26                                          /*!< TPI FIF
 954:./inc/core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
 955:./inc/core_cm3.h **** 
 956:./inc/core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24                                          /*!< TPI FIF
 957:./inc/core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
 958:./inc/core_cm3.h **** 
 959:./inc/core_cm3.h **** #define TPI_FIFO0_ETM2_Pos                 16                                          /*!< TPI FIF
 960:./inc/core_cm3.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
 961:./inc/core_cm3.h **** 
 962:./inc/core_cm3.h **** #define TPI_FIFO0_ETM1_Pos                  8                                          /*!< TPI FIF
 963:./inc/core_cm3.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
 964:./inc/core_cm3.h **** 
 965:./inc/core_cm3.h **** #define TPI_FIFO0_ETM0_Pos                  0                                          /*!< TPI FIF
 966:./inc/core_cm3.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL << TPI_FIFO0_ETM0_Pos)              /*!< TPI FIF
ARM GAS  /tmp/cc2NM2Xt.s 			page 19


 967:./inc/core_cm3.h **** 
 968:./inc/core_cm3.h **** /* TPI ITATBCTR2 Register Definitions */
 969:./inc/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY_Pos           0                                          /*!< TPI ITA
 970:./inc/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL << TPI_ITATBCTR2_ATREADY_Pos)        /*!< TPI ITA
 971:./inc/core_cm3.h **** 
 972:./inc/core_cm3.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
 973:./inc/core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29                                          /*!< TPI FIF
 974:./inc/core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
 975:./inc/core_cm3.h **** 
 976:./inc/core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27                                          /*!< TPI FIF
 977:./inc/core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
 978:./inc/core_cm3.h **** 
 979:./inc/core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26                                          /*!< TPI FIF
 980:./inc/core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
 981:./inc/core_cm3.h **** 
 982:./inc/core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24                                          /*!< TPI FIF
 983:./inc/core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
 984:./inc/core_cm3.h **** 
 985:./inc/core_cm3.h **** #define TPI_FIFO1_ITM2_Pos                 16                                          /*!< TPI FIF
 986:./inc/core_cm3.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
 987:./inc/core_cm3.h **** 
 988:./inc/core_cm3.h **** #define TPI_FIFO1_ITM1_Pos                  8                                          /*!< TPI FIF
 989:./inc/core_cm3.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
 990:./inc/core_cm3.h **** 
 991:./inc/core_cm3.h **** #define TPI_FIFO1_ITM0_Pos                  0                                          /*!< TPI FIF
 992:./inc/core_cm3.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL << TPI_FIFO1_ITM0_Pos)              /*!< TPI FIF
 993:./inc/core_cm3.h **** 
 994:./inc/core_cm3.h **** /* TPI ITATBCTR0 Register Definitions */
 995:./inc/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY_Pos           0                                          /*!< TPI ITA
 996:./inc/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL << TPI_ITATBCTR0_ATREADY_Pos)        /*!< TPI ITA
 997:./inc/core_cm3.h **** 
 998:./inc/core_cm3.h **** /* TPI Integration Mode Control Register Definitions */
 999:./inc/core_cm3.h **** #define TPI_ITCTRL_Mode_Pos                 0                                          /*!< TPI ITC
1000:./inc/core_cm3.h **** #define TPI_ITCTRL_Mode_Msk                (0x1UL << TPI_ITCTRL_Mode_Pos)              /*!< TPI ITC
1001:./inc/core_cm3.h **** 
1002:./inc/core_cm3.h **** /* TPI DEVID Register Definitions */
1003:./inc/core_cm3.h **** #define TPI_DEVID_NRZVALID_Pos             11                                          /*!< TPI DEV
1004:./inc/core_cm3.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1005:./inc/core_cm3.h **** 
1006:./inc/core_cm3.h **** #define TPI_DEVID_MANCVALID_Pos            10                                          /*!< TPI DEV
1007:./inc/core_cm3.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1008:./inc/core_cm3.h **** 
1009:./inc/core_cm3.h **** #define TPI_DEVID_PTINVALID_Pos             9                                          /*!< TPI DEV
1010:./inc/core_cm3.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1011:./inc/core_cm3.h **** 
1012:./inc/core_cm3.h **** #define TPI_DEVID_MinBufSz_Pos              6                                          /*!< TPI DEV
1013:./inc/core_cm3.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1014:./inc/core_cm3.h **** 
1015:./inc/core_cm3.h **** #define TPI_DEVID_AsynClkIn_Pos             5                                          /*!< TPI DEV
1016:./inc/core_cm3.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1017:./inc/core_cm3.h **** 
1018:./inc/core_cm3.h **** #define TPI_DEVID_NrTraceInput_Pos          0                                          /*!< TPI DEV
1019:./inc/core_cm3.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL << TPI_DEVID_NrTraceInput_Pos)      /*!< TPI DEV
1020:./inc/core_cm3.h **** 
1021:./inc/core_cm3.h **** /* TPI DEVTYPE Register Definitions */
1022:./inc/core_cm3.h **** #define TPI_DEVTYPE_SubType_Pos             0                                          /*!< TPI DEV
1023:./inc/core_cm3.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL << TPI_DEVTYPE_SubType_Pos)          /*!< TPI DEV
ARM GAS  /tmp/cc2NM2Xt.s 			page 20


1024:./inc/core_cm3.h **** 
1025:./inc/core_cm3.h **** #define TPI_DEVTYPE_MajorType_Pos           4                                          /*!< TPI DEV
1026:./inc/core_cm3.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1027:./inc/core_cm3.h **** 
1028:./inc/core_cm3.h **** /*@}*/ /* end of group CMSIS_TPI */
1029:./inc/core_cm3.h **** 
1030:./inc/core_cm3.h **** 
1031:./inc/core_cm3.h **** #if (__MPU_PRESENT == 1)
1032:./inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
1033:./inc/core_cm3.h ****     \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1034:./inc/core_cm3.h ****     \brief      Type definitions for the Memory Protection Unit (MPU)
1035:./inc/core_cm3.h ****   @{
1036:./inc/core_cm3.h ****  */
1037:./inc/core_cm3.h **** 
1038:./inc/core_cm3.h **** /** \brief  Structure type to access the Memory Protection Unit (MPU).
1039:./inc/core_cm3.h ****  */
1040:./inc/core_cm3.h **** typedef struct
1041:./inc/core_cm3.h **** {
1042:./inc/core_cm3.h ****   __I  uint32_t TYPE;                    /*!< Offset: 0x000 (R/ )  MPU Type Register               
1043:./inc/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x004 (R/W)  MPU Control Register            
1044:./inc/core_cm3.h ****   __IO uint32_t RNR;                     /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register      
1045:./inc/core_cm3.h ****   __IO uint32_t RBAR;                    /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1046:./inc/core_cm3.h ****   __IO uint32_t RASR;                    /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1047:./inc/core_cm3.h ****   __IO uint32_t RBAR_A1;                 /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1048:./inc/core_cm3.h ****   __IO uint32_t RASR_A1;                 /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1049:./inc/core_cm3.h ****   __IO uint32_t RBAR_A2;                 /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1050:./inc/core_cm3.h ****   __IO uint32_t RASR_A2;                 /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1051:./inc/core_cm3.h ****   __IO uint32_t RBAR_A3;                 /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1052:./inc/core_cm3.h ****   __IO uint32_t RASR_A3;                 /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1053:./inc/core_cm3.h **** } MPU_Type;
1054:./inc/core_cm3.h **** 
1055:./inc/core_cm3.h **** /* MPU Type Register */
1056:./inc/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
1057:./inc/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1058:./inc/core_cm3.h **** 
1059:./inc/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
1060:./inc/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1061:./inc/core_cm3.h **** 
1062:./inc/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
1063:./inc/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
1064:./inc/core_cm3.h **** 
1065:./inc/core_cm3.h **** /* MPU Control Register */
1066:./inc/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
1067:./inc/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1068:./inc/core_cm3.h **** 
1069:./inc/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
1070:./inc/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1071:./inc/core_cm3.h **** 
1072:./inc/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
1073:./inc/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1UL << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
1074:./inc/core_cm3.h **** 
1075:./inc/core_cm3.h **** /* MPU Region Number Register */
1076:./inc/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
1077:./inc/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL << MPU_RNR_REGION_Pos)                 /*!< MPU 
1078:./inc/core_cm3.h **** 
1079:./inc/core_cm3.h **** /* MPU Region Base Address Register */
1080:./inc/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
ARM GAS  /tmp/cc2NM2Xt.s 			page 21


1081:./inc/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1082:./inc/core_cm3.h **** 
1083:./inc/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
1084:./inc/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1085:./inc/core_cm3.h **** 
1086:./inc/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
1087:./inc/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFUL << MPU_RBAR_REGION_Pos)                 /*!< MPU 
1088:./inc/core_cm3.h **** 
1089:./inc/core_cm3.h **** /* MPU Region Attribute and Size Register */
1090:./inc/core_cm3.h **** #define MPU_RASR_ATTRS_Pos                 16                                             /*!< MPU 
1091:./inc/core_cm3.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1092:./inc/core_cm3.h **** 
1093:./inc/core_cm3.h **** #define MPU_RASR_XN_Pos                    28                                             /*!< MPU 
1094:./inc/core_cm3.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1095:./inc/core_cm3.h **** 
1096:./inc/core_cm3.h **** #define MPU_RASR_AP_Pos                    24                                             /*!< MPU 
1097:./inc/core_cm3.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1098:./inc/core_cm3.h **** 
1099:./inc/core_cm3.h **** #define MPU_RASR_TEX_Pos                   19                                             /*!< MPU 
1100:./inc/core_cm3.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1101:./inc/core_cm3.h **** 
1102:./inc/core_cm3.h **** #define MPU_RASR_S_Pos                     18                                             /*!< MPU 
1103:./inc/core_cm3.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1104:./inc/core_cm3.h **** 
1105:./inc/core_cm3.h **** #define MPU_RASR_C_Pos                     17                                             /*!< MPU 
1106:./inc/core_cm3.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1107:./inc/core_cm3.h **** 
1108:./inc/core_cm3.h **** #define MPU_RASR_B_Pos                     16                                             /*!< MPU 
1109:./inc/core_cm3.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1110:./inc/core_cm3.h **** 
1111:./inc/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
1112:./inc/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1113:./inc/core_cm3.h **** 
1114:./inc/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
1115:./inc/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1116:./inc/core_cm3.h **** 
1117:./inc/core_cm3.h **** #define MPU_RASR_ENABLE_Pos                 0                                             /*!< MPU 
1118:./inc/core_cm3.h **** #define MPU_RASR_ENABLE_Msk                (1UL << MPU_RASR_ENABLE_Pos)                   /*!< MPU 
1119:./inc/core_cm3.h **** 
1120:./inc/core_cm3.h **** /*@} end of group CMSIS_MPU */
1121:./inc/core_cm3.h **** #endif
1122:./inc/core_cm3.h **** 
1123:./inc/core_cm3.h **** 
1124:./inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
1125:./inc/core_cm3.h ****     \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1126:./inc/core_cm3.h ****     \brief      Type definitions for the Core Debug Registers
1127:./inc/core_cm3.h ****   @{
1128:./inc/core_cm3.h ****  */
1129:./inc/core_cm3.h **** 
1130:./inc/core_cm3.h **** /** \brief  Structure type to access the Core Debug Register (CoreDebug).
1131:./inc/core_cm3.h ****  */
1132:./inc/core_cm3.h **** typedef struct
1133:./inc/core_cm3.h **** {
1134:./inc/core_cm3.h ****   __IO uint32_t DHCSR;                   /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1135:./inc/core_cm3.h ****   __O  uint32_t DCRSR;                   /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1136:./inc/core_cm3.h ****   __IO uint32_t DCRDR;                   /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1137:./inc/core_cm3.h ****   __IO uint32_t DEMCR;                   /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
ARM GAS  /tmp/cc2NM2Xt.s 			page 22


1138:./inc/core_cm3.h **** } CoreDebug_Type;
1139:./inc/core_cm3.h **** 
1140:./inc/core_cm3.h **** /* Debug Halting Control and Status Register */
1141:./inc/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
1142:./inc/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1143:./inc/core_cm3.h **** 
1144:./inc/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
1145:./inc/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1146:./inc/core_cm3.h **** 
1147:./inc/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
1148:./inc/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1149:./inc/core_cm3.h **** 
1150:./inc/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
1151:./inc/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1152:./inc/core_cm3.h **** 
1153:./inc/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
1154:./inc/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1155:./inc/core_cm3.h **** 
1156:./inc/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
1157:./inc/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1158:./inc/core_cm3.h **** 
1159:./inc/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
1160:./inc/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1161:./inc/core_cm3.h **** 
1162:./inc/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
1163:./inc/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1164:./inc/core_cm3.h **** 
1165:./inc/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
1166:./inc/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1167:./inc/core_cm3.h **** 
1168:./inc/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
1169:./inc/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1170:./inc/core_cm3.h **** 
1171:./inc/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
1172:./inc/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1173:./inc/core_cm3.h **** 
1174:./inc/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
1175:./inc/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
1176:./inc/core_cm3.h **** 
1177:./inc/core_cm3.h **** /* Debug Core Register Selector Register */
1178:./inc/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
1179:./inc/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1180:./inc/core_cm3.h **** 
1181:./inc/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
1182:./inc/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
1183:./inc/core_cm3.h **** 
1184:./inc/core_cm3.h **** /* Debug Exception and Monitor Control Register */
1185:./inc/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
1186:./inc/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1187:./inc/core_cm3.h **** 
1188:./inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
1189:./inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1190:./inc/core_cm3.h **** 
1191:./inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
1192:./inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1193:./inc/core_cm3.h **** 
1194:./inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
ARM GAS  /tmp/cc2NM2Xt.s 			page 23


1195:./inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1196:./inc/core_cm3.h **** 
1197:./inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
1198:./inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1199:./inc/core_cm3.h **** 
1200:./inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
1201:./inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1202:./inc/core_cm3.h **** 
1203:./inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
1204:./inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1205:./inc/core_cm3.h **** 
1206:./inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
1207:./inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1208:./inc/core_cm3.h **** 
1209:./inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
1210:./inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1211:./inc/core_cm3.h **** 
1212:./inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
1213:./inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1214:./inc/core_cm3.h **** 
1215:./inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
1216:./inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1217:./inc/core_cm3.h **** 
1218:./inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
1219:./inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1220:./inc/core_cm3.h **** 
1221:./inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
1222:./inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
1223:./inc/core_cm3.h **** 
1224:./inc/core_cm3.h **** /*@} end of group CMSIS_CoreDebug */
1225:./inc/core_cm3.h **** 
1226:./inc/core_cm3.h **** 
1227:./inc/core_cm3.h **** /** \ingroup    CMSIS_core_register
1228:./inc/core_cm3.h ****     \defgroup   CMSIS_core_base     Core Definitions
1229:./inc/core_cm3.h ****     \brief      Definitions for base addresses, unions, and structures.
1230:./inc/core_cm3.h ****   @{
1231:./inc/core_cm3.h ****  */
1232:./inc/core_cm3.h **** 
1233:./inc/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
1234:./inc/core_cm3.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1235:./inc/core_cm3.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address        
1236:./inc/core_cm3.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address        
1237:./inc/core_cm3.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address        
1238:./inc/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1239:./inc/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address    
1240:./inc/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address       
1241:./inc/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1242:./inc/core_cm3.h **** 
1243:./inc/core_cm3.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1244:./inc/core_cm3.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1245:./inc/core_cm3.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1246:./inc/core_cm3.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1247:./inc/core_cm3.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1248:./inc/core_cm3.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1249:./inc/core_cm3.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1250:./inc/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1251:./inc/core_cm3.h **** 
ARM GAS  /tmp/cc2NM2Xt.s 			page 24


1252:./inc/core_cm3.h **** #if (__MPU_PRESENT == 1)
1253:./inc/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit  
1254:./inc/core_cm3.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit  
1255:./inc/core_cm3.h **** #endif
1256:./inc/core_cm3.h **** 
1257:./inc/core_cm3.h **** /*@} */
1258:./inc/core_cm3.h **** 
1259:./inc/core_cm3.h **** 
1260:./inc/core_cm3.h **** 
1261:./inc/core_cm3.h **** /*******************************************************************************
1262:./inc/core_cm3.h ****  *                Hardware Abstraction Layer
1263:./inc/core_cm3.h ****   Core Function Interface contains:
1264:./inc/core_cm3.h ****   - Core NVIC Functions
1265:./inc/core_cm3.h ****   - Core SysTick Functions
1266:./inc/core_cm3.h ****   - Core Debug Functions
1267:./inc/core_cm3.h ****   - Core Register Access Functions
1268:./inc/core_cm3.h ****  ******************************************************************************/
1269:./inc/core_cm3.h **** /** \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1270:./inc/core_cm3.h **** */
1271:./inc/core_cm3.h **** 
1272:./inc/core_cm3.h **** 
1273:./inc/core_cm3.h **** 
1274:./inc/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
1275:./inc/core_cm3.h **** /** \ingroup  CMSIS_Core_FunctionInterface
1276:./inc/core_cm3.h ****     \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1277:./inc/core_cm3.h ****     \brief      Functions that manage interrupts and exceptions via the NVIC.
1278:./inc/core_cm3.h ****     @{
1279:./inc/core_cm3.h ****  */
1280:./inc/core_cm3.h **** 
1281:./inc/core_cm3.h **** /** \brief  Set Priority Grouping
1282:./inc/core_cm3.h **** 
1283:./inc/core_cm3.h ****   The function sets the priority grouping field using the required unlock sequence.
1284:./inc/core_cm3.h ****   The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1285:./inc/core_cm3.h ****   Only values from 0..7 are used.
1286:./inc/core_cm3.h ****   In case of a conflict between priority grouping and available
1287:./inc/core_cm3.h ****   priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1288:./inc/core_cm3.h **** 
1289:./inc/core_cm3.h ****     \param [in]      PriorityGroup  Priority grouping field.
1290:./inc/core_cm3.h ****  */
1291:./inc/core_cm3.h **** __STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1292:./inc/core_cm3.h **** {
1293:./inc/core_cm3.h ****   uint32_t reg_value;
1294:./inc/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 a
1295:./inc/core_cm3.h **** 
1296:./inc/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1297:./inc/core_cm3.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
1298:./inc/core_cm3.h ****   reg_value  =  (reg_value                                 |
1299:./inc/core_cm3.h ****                 ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
1300:./inc/core_cm3.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
1301:./inc/core_cm3.h ****   SCB->AIRCR =  reg_value;
1302:./inc/core_cm3.h **** }
1303:./inc/core_cm3.h **** 
1304:./inc/core_cm3.h **** 
1305:./inc/core_cm3.h **** /** \brief  Get Priority Grouping
1306:./inc/core_cm3.h **** 
1307:./inc/core_cm3.h ****   The function reads the priority grouping field from the NVIC Interrupt Controller.
1308:./inc/core_cm3.h **** 
ARM GAS  /tmp/cc2NM2Xt.s 			page 25


1309:./inc/core_cm3.h ****     \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1310:./inc/core_cm3.h ****  */
1311:./inc/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
1312:./inc/core_cm3.h **** {
1313:./inc/core_cm3.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
1314:./inc/core_cm3.h **** }
1315:./inc/core_cm3.h **** 
1316:./inc/core_cm3.h **** 
1317:./inc/core_cm3.h **** /** \brief  Enable External Interrupt
1318:./inc/core_cm3.h **** 
1319:./inc/core_cm3.h ****     The function enables a device-specific interrupt in the NVIC interrupt controller.
1320:./inc/core_cm3.h **** 
1321:./inc/core_cm3.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1322:./inc/core_cm3.h ****  */
1323:./inc/core_cm3.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1324:./inc/core_cm3.h **** {
1325:./inc/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
1326:./inc/core_cm3.h **** }
1327:./inc/core_cm3.h **** 
1328:./inc/core_cm3.h **** 
1329:./inc/core_cm3.h **** /** \brief  Disable External Interrupt
1330:./inc/core_cm3.h **** 
1331:./inc/core_cm3.h ****     The function disables a device-specific interrupt in the NVIC interrupt controller.
1332:./inc/core_cm3.h **** 
1333:./inc/core_cm3.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1334:./inc/core_cm3.h ****  */
1335:./inc/core_cm3.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1336:./inc/core_cm3.h **** {
1337:./inc/core_cm3.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
1338:./inc/core_cm3.h **** }
1339:./inc/core_cm3.h **** 
1340:./inc/core_cm3.h **** 
1341:./inc/core_cm3.h **** /** \brief  Get Pending Interrupt
1342:./inc/core_cm3.h **** 
1343:./inc/core_cm3.h ****     The function reads the pending register in the NVIC and returns the pending bit
1344:./inc/core_cm3.h ****     for the specified interrupt.
1345:./inc/core_cm3.h **** 
1346:./inc/core_cm3.h ****     \param [in]      IRQn  Interrupt number.
1347:./inc/core_cm3.h **** 
1348:./inc/core_cm3.h ****     \return             0  Interrupt status is not pending.
1349:./inc/core_cm3.h ****     \return             1  Interrupt status is pending.
1350:./inc/core_cm3.h ****  */
1351:./inc/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1352:./inc/core_cm3.h **** {
1353:./inc/core_cm3.h ****   return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); 
1354:./inc/core_cm3.h **** }
1355:./inc/core_cm3.h **** 
1356:./inc/core_cm3.h **** 
1357:./inc/core_cm3.h **** /** \brief  Set Pending Interrupt
1358:./inc/core_cm3.h **** 
1359:./inc/core_cm3.h ****     The function sets the pending bit of an external interrupt.
1360:./inc/core_cm3.h **** 
1361:./inc/core_cm3.h ****     \param [in]      IRQn  Interrupt number. Value cannot be negative.
1362:./inc/core_cm3.h ****  */
1363:./inc/core_cm3.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1364:./inc/core_cm3.h **** {
1365:./inc/core_cm3.h ****   NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending 
ARM GAS  /tmp/cc2NM2Xt.s 			page 26


1366:./inc/core_cm3.h **** }
1367:./inc/core_cm3.h **** 
1368:./inc/core_cm3.h **** 
1369:./inc/core_cm3.h **** /** \brief  Clear Pending Interrupt
1370:./inc/core_cm3.h **** 
1371:./inc/core_cm3.h ****     The function clears the pending bit of an external interrupt.
1372:./inc/core_cm3.h **** 
1373:./inc/core_cm3.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1374:./inc/core_cm3.h ****  */
1375:./inc/core_cm3.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1376:./inc/core_cm3.h **** {
1377:./inc/core_cm3.h ****   NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrup
1378:./inc/core_cm3.h **** }
1379:./inc/core_cm3.h **** 
1380:./inc/core_cm3.h **** 
1381:./inc/core_cm3.h **** /** \brief  Get Active Interrupt
1382:./inc/core_cm3.h **** 
1383:./inc/core_cm3.h ****     The function reads the active register in NVIC and returns the active bit.
1384:./inc/core_cm3.h **** 
1385:./inc/core_cm3.h ****     \param [in]      IRQn  Interrupt number.
1386:./inc/core_cm3.h **** 
1387:./inc/core_cm3.h ****     \return             0  Interrupt status is not active.
1388:./inc/core_cm3.h ****     \return             1  Interrupt status is active.
1389:./inc/core_cm3.h ****  */
1390:./inc/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
1391:./inc/core_cm3.h **** {
1392:./inc/core_cm3.h ****   return((uint32_t)((NVIC->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /
1393:./inc/core_cm3.h **** }
1394:./inc/core_cm3.h **** 
1395:./inc/core_cm3.h **** 
1396:./inc/core_cm3.h **** /** \brief  Set Interrupt Priority
1397:./inc/core_cm3.h **** 
1398:./inc/core_cm3.h ****     The function sets the priority of an interrupt.
1399:./inc/core_cm3.h **** 
1400:./inc/core_cm3.h ****     \note The priority cannot be set for every core interrupt.
1401:./inc/core_cm3.h **** 
1402:./inc/core_cm3.h ****     \param [in]      IRQn  Interrupt number.
1403:./inc/core_cm3.h ****     \param [in]  priority  Priority to set.
1404:./inc/core_cm3.h ****  */
1405:./inc/core_cm3.h **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1406:./inc/core_cm3.h **** {
  61              		.loc 1 1406 0
  62              		.cfi_startproc
  63              		@ args = 0, pretend = 0, frame = 8
  64              		@ frame_needed = 0, uses_anonymous_args = 0
  65              		@ link register save eliminated.
  66 0000 82B0     		sub	sp, sp, #8	@,,
  67              	.LCFI0:
  68              		.cfi_def_cfa_offset 8
  69 0002 0346     		mov	r3, r0	@ tmp121, IRQn
  70 0004 0091     		str	r1, [sp]	@ priority, priority
  71 0006 8DF80730 		strb	r3, [sp, #7]	@ tmp122, IRQn
1407:./inc/core_cm3.h ****   if(IRQn < 0) {
  72              		.loc 1 1407 0
  73 000a 9DF90730 		ldrsb	r3, [sp, #7]	@ tmp123, IRQn
  74 000e 002B     		cmp	r3, #0	@ tmp123,
  75 0010 0CDA     		bge	.L2	@,
ARM GAS  /tmp/cc2NM2Xt.s 			page 27


1408:./inc/core_cm3.h ****     SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set 
  76              		.loc 1 1408 0
  77 0012 0C49     		ldr	r1, .L4	@ D.5858,
  78 0014 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2	@ IRQn.0, IRQn
  79 0018 03F00F03 		and	r3, r3, #15	@ D.5859, D.5859,
  80 001c 043B     		subs	r3, r3, #4	@ D.5859, D.5859,
  81 001e 009A     		ldr	r2, [sp]	@ tmp124, priority
  82 0020 D2B2     		uxtb	r2, r2	@ D.5860, tmp124
  83 0022 1201     		lsls	r2, r2, #4	@ tmp125, D.5860,
  84 0024 D2B2     		uxtb	r2, r2	@ D.5860, tmp125
  85 0026 0B44     		add	r3, r3, r1	@ tmp126, D.5858
  86 0028 1A76     		strb	r2, [r3, #24]	@ tmp127, _2->SHP
  87 002a 09E0     		b	.L1	@
  88              	.L2:
1409:./inc/core_cm3.h ****   else {
1410:./inc/core_cm3.h ****     NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set 
  89              		.loc 1 1410 0
  90 002c 0649     		ldr	r1, .L4+4	@ D.5861,
  91 002e 9DF90730 		ldrsb	r3, [sp, #7]	@ D.5859, IRQn
  92 0032 009A     		ldr	r2, [sp]	@ tmp128, priority
  93 0034 D2B2     		uxtb	r2, r2	@ D.5860, tmp128
  94 0036 1201     		lsls	r2, r2, #4	@ tmp129, D.5860,
  95 0038 D2B2     		uxtb	r2, r2	@ D.5860, tmp129
  96 003a 0B44     		add	r3, r3, r1	@ tmp130, D.5861
  97 003c 83F80023 		strb	r2, [r3, #768]	@ tmp131, _10->IP
  98              	.L1:
1411:./inc/core_cm3.h **** }
  99              		.loc 1 1411 0
 100 0040 02B0     		add	sp, sp, #8	@,,
 101              		@ sp needed	@
 102 0042 7047     		bx	lr	@
 103              	.L5:
 104              		.align	2
 105              	.L4:
 106 0044 00ED00E0 		.word	-536810240
 107 0048 00E100E0 		.word	-536813312
 108              		.cfi_endproc
 109              	.LFE47:
 110              		.size	NVIC_SetPriority, .-NVIC_SetPriority
 111              		.align	2
 112              		.thumb
 113              		.thumb_func
 114              		.type	SysTick_Config, %function
 115              	SysTick_Config:
 116              	.LFB52:
1412:./inc/core_cm3.h **** 
1413:./inc/core_cm3.h **** 
1414:./inc/core_cm3.h **** /** \brief  Get Interrupt Priority
1415:./inc/core_cm3.h **** 
1416:./inc/core_cm3.h ****     The function reads the priority of an interrupt. The interrupt
1417:./inc/core_cm3.h ****     number can be positive to specify an external (device specific)
1418:./inc/core_cm3.h ****     interrupt, or negative to specify an internal (core) interrupt.
1419:./inc/core_cm3.h **** 
1420:./inc/core_cm3.h **** 
1421:./inc/core_cm3.h ****     \param [in]   IRQn  Interrupt number.
1422:./inc/core_cm3.h ****     \return             Interrupt Priority. Value is aligned automatically to the implemented
1423:./inc/core_cm3.h ****                         priority bits of the microcontroller.
ARM GAS  /tmp/cc2NM2Xt.s 			page 28


1424:./inc/core_cm3.h ****  */
1425:./inc/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
1426:./inc/core_cm3.h **** {
1427:./inc/core_cm3.h **** 
1428:./inc/core_cm3.h ****   if(IRQn < 0) {
1429:./inc/core_cm3.h ****     return((uint32_t)(SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] >> (8 - __NVIC_PRIO_BITS)));  } /* get p
1430:./inc/core_cm3.h ****   else {
1431:./inc/core_cm3.h ****     return((uint32_t)(NVIC->IP[(uint32_t)(IRQn)]           >> (8 - __NVIC_PRIO_BITS)));  } /* get p
1432:./inc/core_cm3.h **** }
1433:./inc/core_cm3.h **** 
1434:./inc/core_cm3.h **** 
1435:./inc/core_cm3.h **** /** \brief  Encode Priority
1436:./inc/core_cm3.h **** 
1437:./inc/core_cm3.h ****     The function encodes the priority for an interrupt with the given priority group,
1438:./inc/core_cm3.h ****     preemptive priority value, and subpriority value.
1439:./inc/core_cm3.h ****     In case of a conflict between priority grouping and available
1440:./inc/core_cm3.h ****     priority bits (__NVIC_PRIO_BITS), the samllest possible priority group is set.
1441:./inc/core_cm3.h **** 
1442:./inc/core_cm3.h ****     \param [in]     PriorityGroup  Used priority group.
1443:./inc/core_cm3.h ****     \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
1444:./inc/core_cm3.h ****     \param [in]       SubPriority  Subpriority value (starting from 0).
1445:./inc/core_cm3.h ****     \return                        Encoded priority. Value can be used in the function \ref NVIC_Se
1446:./inc/core_cm3.h ****  */
1447:./inc/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
1448:./inc/core_cm3.h **** {
1449:./inc/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used        
1450:./inc/core_cm3.h ****   uint32_t PreemptPriorityBits;
1451:./inc/core_cm3.h ****   uint32_t SubPriorityBits;
1452:./inc/core_cm3.h **** 
1453:./inc/core_cm3.h ****   PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - Priori
1454:./inc/core_cm3.h ****   SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __
1455:./inc/core_cm3.h **** 
1456:./inc/core_cm3.h ****   return (
1457:./inc/core_cm3.h ****            ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
1458:./inc/core_cm3.h ****            ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
1459:./inc/core_cm3.h ****          );
1460:./inc/core_cm3.h **** }
1461:./inc/core_cm3.h **** 
1462:./inc/core_cm3.h **** 
1463:./inc/core_cm3.h **** /** \brief  Decode Priority
1464:./inc/core_cm3.h **** 
1465:./inc/core_cm3.h ****     The function decodes an interrupt priority value with a given priority group to
1466:./inc/core_cm3.h ****     preemptive priority value and subpriority value.
1467:./inc/core_cm3.h ****     In case of a conflict between priority grouping and available
1468:./inc/core_cm3.h ****     priority bits (__NVIC_PRIO_BITS) the samllest possible priority group is set.
1469:./inc/core_cm3.h **** 
1470:./inc/core_cm3.h ****     \param [in]         Priority   Priority value, which can be retrieved with the function \ref NV
1471:./inc/core_cm3.h ****     \param [in]     PriorityGroup  Used priority group.
1472:./inc/core_cm3.h ****     \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
1473:./inc/core_cm3.h ****     \param [out]     pSubPriority  Subpriority value (starting from 0).
1474:./inc/core_cm3.h ****  */
1475:./inc/core_cm3.h **** __STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* pPre
1476:./inc/core_cm3.h **** {
1477:./inc/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used        
1478:./inc/core_cm3.h ****   uint32_t PreemptPriorityBits;
1479:./inc/core_cm3.h ****   uint32_t SubPriorityBits;
1480:./inc/core_cm3.h **** 
ARM GAS  /tmp/cc2NM2Xt.s 			page 29


1481:./inc/core_cm3.h ****   PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - Priori
1482:./inc/core_cm3.h ****   SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __
1483:./inc/core_cm3.h **** 
1484:./inc/core_cm3.h ****   *pPreemptPriority = (Priority >> SubPriorityBits) & ((1 << (PreemptPriorityBits)) - 1);
1485:./inc/core_cm3.h ****   *pSubPriority     = (Priority                   ) & ((1 << (SubPriorityBits    )) - 1);
1486:./inc/core_cm3.h **** }
1487:./inc/core_cm3.h **** 
1488:./inc/core_cm3.h **** 
1489:./inc/core_cm3.h **** /** \brief  System Reset
1490:./inc/core_cm3.h **** 
1491:./inc/core_cm3.h ****     The function initiates a system reset request to reset the MCU.
1492:./inc/core_cm3.h ****  */
1493:./inc/core_cm3.h **** __STATIC_INLINE void NVIC_SystemReset(void)
1494:./inc/core_cm3.h **** {
1495:./inc/core_cm3.h ****   __DSB();                                                     /* Ensure all outstanding memory acc
1496:./inc/core_cm3.h ****                                                                   buffered write are completed befo
1497:./inc/core_cm3.h ****   SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
1498:./inc/core_cm3.h ****                  (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
1499:./inc/core_cm3.h ****                  SCB_AIRCR_SYSRESETREQ_Msk);                   /* Keep priority group unchanged */
1500:./inc/core_cm3.h ****   __DSB();                                                     /* Ensure completion of memory acces
1501:./inc/core_cm3.h ****   while(1);                                                    /* wait until reset */
1502:./inc/core_cm3.h **** }
1503:./inc/core_cm3.h **** 
1504:./inc/core_cm3.h **** /*@} end of CMSIS_Core_NVICFunctions */
1505:./inc/core_cm3.h **** 
1506:./inc/core_cm3.h **** 
1507:./inc/core_cm3.h **** 
1508:./inc/core_cm3.h **** /* ##################################    SysTick function  ########################################
1509:./inc/core_cm3.h **** /** \ingroup  CMSIS_Core_FunctionInterface
1510:./inc/core_cm3.h ****     \defgroup CMSIS_Core_SysTickFunctions SysTick Functions
1511:./inc/core_cm3.h ****     \brief      Functions that configure the System.
1512:./inc/core_cm3.h ****   @{
1513:./inc/core_cm3.h ****  */
1514:./inc/core_cm3.h **** 
1515:./inc/core_cm3.h **** #if (__Vendor_SysTickConfig == 0)
1516:./inc/core_cm3.h **** 
1517:./inc/core_cm3.h **** /** \brief  System Tick Configuration
1518:./inc/core_cm3.h **** 
1519:./inc/core_cm3.h ****     The function initializes the System Timer and its interrupt, and starts the System Tick Timer.
1520:./inc/core_cm3.h ****     Counter is in free running mode to generate periodic interrupts.
1521:./inc/core_cm3.h **** 
1522:./inc/core_cm3.h ****     \param [in]  ticks  Number of ticks between two interrupts.
1523:./inc/core_cm3.h **** 
1524:./inc/core_cm3.h ****     \return          0  Function succeeded.
1525:./inc/core_cm3.h ****     \return          1  Function failed.
1526:./inc/core_cm3.h **** 
1527:./inc/core_cm3.h ****     \note     When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
1528:./inc/core_cm3.h ****     function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
1529:./inc/core_cm3.h ****     must contain a vendor-specific implementation of this function.
1530:./inc/core_cm3.h **** 
1531:./inc/core_cm3.h ****  */
1532:./inc/core_cm3.h **** __STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
1533:./inc/core_cm3.h **** {
 117              		.loc 1 1533 0
 118              		.cfi_startproc
 119              		@ args = 0, pretend = 0, frame = 8
 120              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc2NM2Xt.s 			page 30


 121 004c 00B5     		push	{lr}	@
 122              	.LCFI1:
 123              		.cfi_def_cfa_offset 4
 124              		.cfi_offset 14, -4
 125 004e 83B0     		sub	sp, sp, #12	@,,
 126              	.LCFI2:
 127              		.cfi_def_cfa_offset 16
 128 0050 0190     		str	r0, [sp, #4]	@ ticks, ticks
1534:./inc/core_cm3.h ****   if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 129              		.loc 1 1534 0
 130 0052 019B     		ldr	r3, [sp, #4]	@ tmp117, ticks
 131 0054 013B     		subs	r3, r3, #1	@ D.5863, tmp117,
 132 0056 B3F1807F 		cmp	r3, #16777216	@ D.5863,
 133 005a 01D3     		bcc	.L7	@,
 134              		.loc 1 1534 0 is_stmt 0 discriminator 1
 135 005c 0123     		movs	r3, #1	@ D.5862,
 136 005e 0FE0     		b	.L8	@
 137              	.L7:
1535:./inc/core_cm3.h **** 
1536:./inc/core_cm3.h ****   SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 138              		.loc 1 1536 0 is_stmt 1
 139 0060 094B     		ldr	r3, .L9	@ D.5864,
 140 0062 019A     		ldr	r2, [sp, #4]	@ tmp118, ticks
 141 0064 013A     		subs	r2, r2, #1	@ D.5863, tmp118,
 142 0066 5A60     		str	r2, [r3, #4]	@ D.5863, _5->LOAD
1537:./inc/core_cm3.h ****   NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrup
 143              		.loc 1 1537 0
 144 0068 4FF0FF30 		mov	r0, #-1	@,
 145 006c 0F21     		movs	r1, #15	@,
 146 006e FFF7C7FF 		bl	NVIC_SetPriority	@
1538:./inc/core_cm3.h ****   SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 147              		.loc 1 1538 0
 148 0072 054B     		ldr	r3, .L9	@ D.5864,
 149 0074 0022     		movs	r2, #0	@ tmp119,
 150 0076 9A60     		str	r2, [r3, #8]	@ tmp119, _7->VAL
1539:./inc/core_cm3.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 151              		.loc 1 1539 0
 152 0078 034B     		ldr	r3, .L9	@ D.5864,
 153 007a 0722     		movs	r2, #7	@ tmp120,
 154 007c 1A60     		str	r2, [r3]	@ tmp120, _8->CTRL
1540:./inc/core_cm3.h ****                    SysTick_CTRL_TICKINT_Msk   |
1541:./inc/core_cm3.h ****                    SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Ti
1542:./inc/core_cm3.h ****   return (0);                                                  /* Function successful */
 155              		.loc 1 1542 0
 156 007e 0023     		movs	r3, #0	@ D.5862,
 157              	.L8:
1543:./inc/core_cm3.h **** }
 158              		.loc 1 1543 0
 159 0080 1846     		mov	r0, r3	@, <retval>
 160 0082 03B0     		add	sp, sp, #12	@,,
 161              		@ sp needed	@
 162 0084 5DF804FB 		ldr	pc, [sp], #4	@
 163              	.L10:
 164              		.align	2
 165              	.L9:
 166 0088 10E000E0 		.word	-536813552
 167              		.cfi_endproc
ARM GAS  /tmp/cc2NM2Xt.s 			page 31


 168              	.LFE52:
 169              		.size	SysTick_Config, .-SysTick_Config
 170              		.bss
 171              		.align	2
 172              	TimingDelay:
 173 0000 00000000 		.space	4
 174              		.global	BlinkSpeed
 175              		.type	BlinkSpeed, %object
 176              		.size	BlinkSpeed, 1
 177              	BlinkSpeed:
 178 0004 00       		.space	1
 179 0005 000000   		.text
 180              		.align	2
 181              		.global	main
 182              		.thumb
 183              		.thumb_func
 184              		.type	main, %function
 185              	main:
 186              	.LFB56:
 187              		.file 2 "src/main.c"
   1:src/main.c    **** /**
   2:src/main.c    ****   ******************************************************************************
   3:src/main.c    ****   * @file    main.c
   4:src/main.c    ****   * @author  MCD Application Team
   5:src/main.c    ****   * @version V1.0.0
   6:src/main.c    ****   * @date    29-July-2013
   7:src/main.c    ****   * @brief   Main program body
   8:src/main.c    ****   ******************************************************************************
   9:src/main.c    ****   * @attention
  10:src/main.c    ****   *
  11:src/main.c    ****   * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
  12:src/main.c    ****   *
  13:src/main.c    ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  14:src/main.c    ****   * You may not use this file except in compliance with the License.
  15:src/main.c    ****   * You may obtain a copy of the License at:
  16:src/main.c    ****   *
  17:src/main.c    ****   *        http://www.st.com/software_license_agreement_liberty_v2
  18:src/main.c    ****   *
  19:src/main.c    ****   * Unless required by applicable law or agreed to in writing, software
  20:src/main.c    ****   * distributed under the License is distributed on an "AS IS" BASIS,
  21:src/main.c    ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  22:src/main.c    ****   * See the License for the specific language governing permissions and
  23:src/main.c    ****   * limitations under the License.
  24:src/main.c    ****   *
  25:src/main.c    ****   ******************************************************************************
  26:src/main.c    ****   */
  27:src/main.c    **** 
  28:src/main.c    **** /* Includes ------------------------------------------------------------------*/
  29:src/main.c    **** #include "main.h"
  30:src/main.c    **** #include "hal.h"
  31:src/main.c    **** 
  32:src/main.c    **** /** @addtogroup STM32L100C-Discovery_Demo
  33:src/main.c    ****   * @{
  34:src/main.c    ****   */
  35:src/main.c    **** 
  36:src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  37:src/main.c    **** /* Private define ------------------------------------------------------------*/
ARM GAS  /tmp/cc2NM2Xt.s 			page 32


  38:src/main.c    **** /* Private macro -------------------------------------------------------------*/
  39:src/main.c    **** /* Private variables ---------------------------------------------------------*/
  40:src/main.c    **** static __IO uint32_t TimingDelay;
  41:src/main.c    **** uint8_t BlinkSpeed = 0;
  42:src/main.c    **** 
  43:src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  44:src/main.c    **** /* Private functions ---------------------------------------------------------*/
  45:src/main.c    **** 
  46:src/main.c    **** /**
  47:src/main.c    ****   * @brief  Main program.
  48:src/main.c    ****   * @param  None
  49:src/main.c    ****   * @retval None
  50:src/main.c    ****   */
  51:src/main.c    **** int main(void)
  52:src/main.c    **** {
 188              		.loc 2 52 0
 189              		.cfi_startproc
 190              		@ args = 0, pretend = 0, frame = 24
 191              		@ frame_needed = 0, uses_anonymous_args = 0
 192 008c 00B5     		push	{lr}	@
 193              	.LCFI3:
 194              		.cfi_def_cfa_offset 4
 195              		.cfi_offset 14, -4
 196 008e 87B0     		sub	sp, sp, #28	@,,
 197              	.LCFI4:
 198              		.cfi_def_cfa_offset 32
  53:src/main.c    ****   RCC_ClocksTypeDef RCC_Clocks;
  54:src/main.c    ****   uint16_t temp_volt;
  55:src/main.c    **** 
  56:src/main.c    **** 
  57:src/main.c    ****   /* SysTick end of count event each 1ms */
  58:src/main.c    ****   RCC_GetClocksFreq(&RCC_Clocks);
 199              		.loc 2 58 0
 200 0090 01AB     		add	r3, sp, #4	@ tmp113,,
 201 0092 1846     		mov	r0, r3	@, tmp113
 202 0094 FFF7FEFF 		bl	RCC_GetClocksFreq	@
  59:src/main.c    ****   SysTick_Config(RCC_Clocks.HCLK_Frequency / 1000);
 203              		.loc 2 59 0
 204 0098 029A     		ldr	r2, [sp, #8]	@ D.5865, RCC_Clocks.HCLK_Frequency
 205 009a 0F4B     		ldr	r3, .L13	@ tmp115,
 206 009c A3FB0213 		umull	r1, r3, r3, r2	@, tmp114, tmp115, D.5865
 207 00a0 9B09     		lsrs	r3, r3, #6	@ D.5865, tmp114,
 208 00a2 1846     		mov	r0, r3	@, D.5865
 209 00a4 FFF7D2FF 		bl	SysTick_Config	@
  60:src/main.c    **** 
  61:src/main.c    ****   hal_setup();
 210              		.loc 2 61 0
 211 00a8 FFF7FEFF 		bl	hal_setup	@
 212              	.L12:
  62:src/main.c    **** 
  63:src/main.c    ****   while(1)
  64:src/main.c    ****   {
  65:src/main.c    ****       temp_volt = adc_read(ADC_Channel_TempSensor);
 213              		.loc 2 65 0 discriminator 1
 214 00ac 1020     		movs	r0, #16	@,
 215 00ae FFF7FEFF 		bl	adc_read	@
 216 00b2 0346     		mov	r3, r0	@ tmp116,
ARM GAS  /tmp/cc2NM2Xt.s 			page 33


 217 00b4 ADF81630 		strh	r3, [sp, #22]	@ movhi	@ tmp117, temp_volt
  66:src/main.c    ****       /* wait for 10ms */
  67:src/main.c    ****       Delay(20);
 218              		.loc 2 67 0 discriminator 1
 219 00b8 1420     		movs	r0, #20	@,
 220 00ba FFF7FEFF 		bl	Delay	@
  68:src/main.c    ****       hbridge_set(HBRIDGE_CH_2A, 1);
 221              		.loc 2 68 0 discriminator 1
 222 00be 0020     		movs	r0, #0	@,
 223 00c0 0121     		movs	r1, #1	@,
 224 00c2 FFF7FEFF 		bl	hbridge_set	@
  69:src/main.c    ****       Delay(20);
 225              		.loc 2 69 0 discriminator 1
 226 00c6 1420     		movs	r0, #20	@,
 227 00c8 FFF7FEFF 		bl	Delay	@
  70:src/main.c    ****       hbridge_set(HBRIDGE_CH_2A, 0);
 228              		.loc 2 70 0 discriminator 1
 229 00cc 0020     		movs	r0, #0	@,
 230 00ce 0021     		movs	r1, #0	@,
 231 00d0 FFF7FEFF 		bl	hbridge_set	@
  71:src/main.c    **** 
  72:src/main.c    ****   }
 232              		.loc 2 72 0 discriminator 1
 233 00d4 EAE7     		b	.L12	@
 234              	.L14:
 235 00d6 00BF     		.align	2
 236              	.L13:
 237 00d8 D34D6210 		.word	274877907
 238              		.cfi_endproc
 239              	.LFE56:
 240              		.size	main, .-main
 241              		.align	2
 242              		.global	Delay
 243              		.thumb
 244              		.thumb_func
 245              		.type	Delay, %function
 246              	Delay:
 247              	.LFB57:
  73:src/main.c    **** }
  74:src/main.c    **** 
  75:src/main.c    **** /**
  76:src/main.c    ****   * @brief  Inserts a delay time.
  77:src/main.c    ****   * @param  nTime: specifies the delay time length, in 1 ms.
  78:src/main.c    ****   * @retval None
  79:src/main.c    ****   */
  80:src/main.c    **** void Delay(__IO uint32_t nTime)
  81:src/main.c    **** {
 248              		.loc 2 81 0
 249              		.cfi_startproc
 250              		@ args = 0, pretend = 0, frame = 8
 251              		@ frame_needed = 0, uses_anonymous_args = 0
 252              		@ link register save eliminated.
 253 00dc 82B0     		sub	sp, sp, #8	@,,
 254              	.LCFI5:
 255              		.cfi_def_cfa_offset 8
 256 00de 0190     		str	r0, [sp, #4]	@ nTime, nTime
  82:src/main.c    ****   TimingDelay = nTime;
ARM GAS  /tmp/cc2NM2Xt.s 			page 34


 257              		.loc 2 82 0
 258 00e0 019A     		ldr	r2, [sp, #4]	@ nTime.1, nTime
 259 00e2 044B     		ldr	r3, .L17	@ tmp112,
 260 00e4 1A60     		str	r2, [r3]	@ nTime.1, TimingDelay
  83:src/main.c    **** 
  84:src/main.c    ****   while(TimingDelay != 0);
 261              		.loc 2 84 0
 262 00e6 00BF     		nop
 263              	.L16:
 264              		.loc 2 84 0 is_stmt 0 discriminator 1
 265 00e8 024B     		ldr	r3, .L17	@ tmp113,
 266 00ea 1B68     		ldr	r3, [r3]	@ TimingDelay.2, TimingDelay
 267 00ec 002B     		cmp	r3, #0	@ TimingDelay.2,
 268 00ee FBD1     		bne	.L16	@,
  85:src/main.c    **** }
 269              		.loc 2 85 0 is_stmt 1
 270 00f0 02B0     		add	sp, sp, #8	@,,
 271              		@ sp needed	@
 272 00f2 7047     		bx	lr	@
 273              	.L18:
 274              		.align	2
 275              	.L17:
 276 00f4 00000000 		.word	TimingDelay
 277              		.cfi_endproc
 278              	.LFE57:
 279              		.size	Delay, .-Delay
 280              		.align	2
 281              		.global	TimingDelay_Decrement
 282              		.thumb
 283              		.thumb_func
 284              		.type	TimingDelay_Decrement, %function
 285              	TimingDelay_Decrement:
 286              	.LFB58:
  86:src/main.c    **** 
  87:src/main.c    **** /**
  88:src/main.c    ****   * @brief  Decrements the TimingDelay variable.
  89:src/main.c    ****   * @param  None
  90:src/main.c    ****   * @retval None
  91:src/main.c    ****   */
  92:src/main.c    **** void TimingDelay_Decrement(void)
  93:src/main.c    **** {
 287              		.loc 2 93 0
 288              		.cfi_startproc
 289              		@ args = 0, pretend = 0, frame = 0
 290              		@ frame_needed = 0, uses_anonymous_args = 0
 291              		@ link register save eliminated.
  94:src/main.c    ****   if (TimingDelay != 0x00)
 292              		.loc 2 94 0
 293 00f8 044B     		ldr	r3, .L21	@ tmp113,
 294 00fa 1B68     		ldr	r3, [r3]	@ TimingDelay.3, TimingDelay
 295 00fc 002B     		cmp	r3, #0	@ TimingDelay.3,
 296 00fe 04D0     		beq	.L19	@,
  95:src/main.c    ****   {
  96:src/main.c    ****     TimingDelay--;
 297              		.loc 2 96 0
 298 0100 024B     		ldr	r3, .L21	@ tmp114,
 299 0102 1B68     		ldr	r3, [r3]	@ TimingDelay.4, TimingDelay
ARM GAS  /tmp/cc2NM2Xt.s 			page 35


 300 0104 5A1E     		subs	r2, r3, #1	@ TimingDelay.5, TimingDelay.4,
 301 0106 014B     		ldr	r3, .L21	@ tmp115,
 302 0108 1A60     		str	r2, [r3]	@ TimingDelay.5, TimingDelay
 303              	.L19:
  97:src/main.c    ****   }
  98:src/main.c    **** }
 304              		.loc 2 98 0
 305 010a 7047     		bx	lr	@
 306              	.L22:
 307              		.align	2
 308              	.L21:
 309 010c 00000000 		.word	TimingDelay
 310              		.cfi_endproc
 311              	.LFE58:
 312              		.size	TimingDelay_Decrement, .-TimingDelay_Decrement
 313              	.Letext0:
 314              		.file 3 "./inc/stm32l1xx.h"
 315              		.file 4 "/home/zbanks/gcc-arm-none-eabi/arm-none-eabi/include/stdint.h"
 316              		.file 5 "/home/zbanks//STM32L1xx_StdPeriph_Lib_V1.2.0/Libraries/STM32L1xx_StdPeriph_Driver/inc/stm
 317              		.file 6 "./inc/hal.h"
 318              		.section	.debug_info,"",%progbits
 319              	.Ldebug_info0:
 320 0000 E5060000 		.4byte	0x6e5
 321 0004 0200     		.2byte	0x2
 322 0006 00000000 		.4byte	.Ldebug_abbrev0
 323 000a 04       		.byte	0x4
 324 000b 01       		.uleb128 0x1
 325 000c A3020000 		.4byte	.LASF120
 326 0010 01       		.byte	0x1
 327 0011 C2050000 		.4byte	.LASF121
 328 0015 B7000000 		.4byte	.LASF122
 329 0019 00000000 		.4byte	.Ltext0
 330 001d 10010000 		.4byte	.Letext0
 331 0021 00000000 		.4byte	.Ldebug_line0
 332 0025 02       		.uleb128 0x2
 333 0026 96030000 		.4byte	.LASF111
 334 002a 01       		.byte	0x1
 335 002b 03       		.byte	0x3
 336 002c AB       		.byte	0xab
 337 002d 70010000 		.4byte	0x170
 338 0031 03       		.uleb128 0x3
 339 0032 24040000 		.4byte	.LASF0
 340 0036 72       		.sleb128 -14
 341 0037 03       		.uleb128 0x3
 342 0038 12010000 		.4byte	.LASF1
 343 003c 74       		.sleb128 -12
 344 003d 03       		.uleb128 0x3
 345 003e 95020000 		.4byte	.LASF2
 346 0042 75       		.sleb128 -11
 347 0043 03       		.uleb128 0x3
 348 0044 09050000 		.4byte	.LASF3
 349 0048 76       		.sleb128 -10
 350 0049 03       		.uleb128 0x3
 351 004a 3B000000 		.4byte	.LASF4
 352 004e 7B       		.sleb128 -5
 353 004f 03       		.uleb128 0x3
 354 0050 F7040000 		.4byte	.LASF5
ARM GAS  /tmp/cc2NM2Xt.s 			page 36


 355 0054 7C       		.sleb128 -4
 356 0055 03       		.uleb128 0x3
 357 0056 E6000000 		.4byte	.LASF6
 358 005a 7E       		.sleb128 -2
 359 005b 03       		.uleb128 0x3
 360 005c 86040000 		.4byte	.LASF7
 361 0060 7F       		.sleb128 -1
 362 0061 03       		.uleb128 0x3
 363 0062 80020000 		.4byte	.LASF8
 364 0066 00       		.sleb128 0
 365 0067 03       		.uleb128 0x3
 366 0068 47030000 		.4byte	.LASF9
 367 006c 01       		.sleb128 1
 368 006d 03       		.uleb128 0x3
 369 006e 31010000 		.4byte	.LASF10
 370 0072 02       		.sleb128 2
 371 0073 03       		.uleb128 0x3
 372 0074 CB010000 		.4byte	.LASF11
 373 0078 03       		.sleb128 3
 374 0079 03       		.uleb128 0x3
 375 007a 89000000 		.4byte	.LASF12
 376 007e 04       		.sleb128 4
 377 007f 03       		.uleb128 0x3
 378 0080 FE000000 		.4byte	.LASF13
 379 0084 05       		.sleb128 5
 380 0085 03       		.uleb128 0x3
 381 0086 AC000000 		.4byte	.LASF14
 382 008a 06       		.sleb128 6
 383 008b 03       		.uleb128 0x3
 384 008c 51040000 		.4byte	.LASF15
 385 0090 07       		.sleb128 7
 386 0091 03       		.uleb128 0x3
 387 0092 FC010000 		.4byte	.LASF16
 388 0096 08       		.sleb128 8
 389 0097 03       		.uleb128 0x3
 390 0098 E0050000 		.4byte	.LASF17
 391 009c 09       		.sleb128 9
 392 009d 03       		.uleb128 0x3
 393 009e 33030000 		.4byte	.LASF18
 394 00a2 0A       		.sleb128 10
 395 00a3 03       		.uleb128 0x3
 396 00a4 4C020000 		.4byte	.LASF19
 397 00a8 0B       		.sleb128 11
 398 00a9 03       		.uleb128 0x3
 399 00aa 4E000000 		.4byte	.LASF20
 400 00ae 0C       		.sleb128 12
 401 00af 03       		.uleb128 0x3
 402 00b0 55030000 		.4byte	.LASF21
 403 00b4 0D       		.sleb128 13
 404 00b5 03       		.uleb128 0x3
 405 00b6 6A010000 		.4byte	.LASF22
 406 00ba 0E       		.sleb128 14
 407 00bb 03       		.uleb128 0x3
 408 00bc 7E050000 		.4byte	.LASF23
 409 00c0 0F       		.sleb128 15
 410 00c1 03       		.uleb128 0x3
 411 00c2 29020000 		.4byte	.LASF24
ARM GAS  /tmp/cc2NM2Xt.s 			page 37


 412 00c6 10       		.sleb128 16
 413 00c7 03       		.uleb128 0x3
 414 00c8 1B000000 		.4byte	.LASF25
 415 00cc 11       		.sleb128 17
 416 00cd 03       		.uleb128 0x3
 417 00ce 07020000 		.4byte	.LASF26
 418 00d2 12       		.sleb128 18
 419 00d3 03       		.uleb128 0x3
 420 00d4 E1040000 		.4byte	.LASF27
 421 00d8 13       		.sleb128 19
 422 00d9 03       		.uleb128 0x3
 423 00da 22060000 		.4byte	.LASF28
 424 00de 14       		.sleb128 20
 425 00df 03       		.uleb128 0x3
 426 00e0 AD050000 		.4byte	.LASF29
 427 00e4 15       		.sleb128 21
 428 00e5 03       		.uleb128 0x3
 429 00e6 94010000 		.4byte	.LASF30
 430 00ea 16       		.sleb128 22
 431 00eb 03       		.uleb128 0x3
 432 00ec 27050000 		.4byte	.LASF31
 433 00f0 17       		.sleb128 23
 434 00f1 03       		.uleb128 0x3
 435 00f2 3E030000 		.4byte	.LASF32
 436 00f6 18       		.sleb128 24
 437 00f7 03       		.uleb128 0x3
 438 00f8 11000000 		.4byte	.LASF33
 439 00fc 19       		.sleb128 25
 440 00fd 03       		.uleb128 0x3
 441 00fe 67020000 		.4byte	.LASF34
 442 0102 1A       		.sleb128 26
 443 0103 03       		.uleb128 0x3
 444 0104 00000000 		.4byte	.LASF35
 445 0108 1B       		.sleb128 27
 446 0109 03       		.uleb128 0x3
 447 010a B3040000 		.4byte	.LASF36
 448 010e 1C       		.sleb128 28
 449 010f 03       		.uleb128 0x3
 450 0110 42020000 		.4byte	.LASF37
 451 0114 1D       		.sleb128 29
 452 0115 03       		.uleb128 0x3
 453 0116 44000000 		.4byte	.LASF38
 454 011a 1E       		.sleb128 30
 455 011b 03       		.uleb128 0x3
 456 011c 68030000 		.4byte	.LASF39
 457 0120 1F       		.sleb128 31
 458 0121 03       		.uleb128 0x3
 459 0122 79040000 		.4byte	.LASF40
 460 0126 20       		.sleb128 32
 461 0127 03       		.uleb128 0x3
 462 0128 17020000 		.4byte	.LASF41
 463 012c 21       		.sleb128 33
 464 012d 03       		.uleb128 0x3
 465 012e 2E000000 		.4byte	.LASF42
 466 0132 22       		.sleb128 34
 467 0133 03       		.uleb128 0x3
 468 0134 56010000 		.4byte	.LASF43
ARM GAS  /tmp/cc2NM2Xt.s 			page 38


 469 0138 23       		.sleb128 35
 470 0139 03       		.uleb128 0x3
 471 013a 55050000 		.4byte	.LASF44
 472 013e 24       		.sleb128 36
 473 013f 03       		.uleb128 0x3
 474 0140 0B040000 		.4byte	.LASF45
 475 0144 25       		.sleb128 37
 476 0145 03       		.uleb128 0x3
 477 0146 B9010000 		.4byte	.LASF46
 478 014a 26       		.sleb128 38
 479 014b 03       		.uleb128 0x3
 480 014c 16060000 		.4byte	.LASF47
 481 0150 27       		.sleb128 39
 482 0151 03       		.uleb128 0x3
 483 0152 D7000000 		.4byte	.LASF48
 484 0156 28       		.sleb128 40
 485 0157 03       		.uleb128 0x3
 486 0158 A6030000 		.4byte	.LASF49
 487 015c 29       		.sleb128 41
 488 015d 03       		.uleb128 0x3
 489 015e F1030000 		.4byte	.LASF50
 490 0162 2A       		.sleb128 42
 491 0163 03       		.uleb128 0x3
 492 0164 60010000 		.4byte	.LASF51
 493 0168 2B       		.sleb128 43
 494 0169 03       		.uleb128 0x3
 495 016a 74050000 		.4byte	.LASF52
 496 016e 2C       		.sleb128 44
 497 016f 00       		.byte	0
 498 0170 04       		.uleb128 0x4
 499 0171 AF010000 		.4byte	.LASF53
 500 0175 03       		.byte	0x3
 501 0176 0401     		.2byte	0x104
 502 0178 25000000 		.4byte	0x25
 503 017c 05       		.uleb128 0x5
 504 017d 01       		.byte	0x1
 505 017e 06       		.byte	0x6
 506 017f B6050000 		.4byte	.LASF55
 507 0183 06       		.uleb128 0x6
 508 0184 5F020000 		.4byte	.LASF54
 509 0188 04       		.byte	0x4
 510 0189 2A       		.byte	0x2a
 511 018a 8E010000 		.4byte	0x18e
 512 018e 05       		.uleb128 0x5
 513 018f 01       		.byte	0x1
 514 0190 08       		.byte	0x8
 515 0191 19050000 		.4byte	.LASF56
 516 0195 05       		.uleb128 0x5
 517 0196 02       		.byte	0x2
 518 0197 05       		.byte	0x5
 519 0198 E7030000 		.4byte	.LASF57
 520 019c 06       		.uleb128 0x6
 521 019d 8D030000 		.4byte	.LASF58
 522 01a1 04       		.byte	0x4
 523 01a2 36       		.byte	0x36
 524 01a3 A7010000 		.4byte	0x1a7
 525 01a7 05       		.uleb128 0x5
ARM GAS  /tmp/cc2NM2Xt.s 			page 39


 526 01a8 02       		.byte	0x2
 527 01a9 07       		.byte	0x7
 528 01aa CD050000 		.4byte	.LASF59
 529 01ae 06       		.uleb128 0x6
 530 01af BD040000 		.4byte	.LASF60
 531 01b3 04       		.byte	0x4
 532 01b4 4F       		.byte	0x4f
 533 01b5 B9010000 		.4byte	0x1b9
 534 01b9 05       		.uleb128 0x5
 535 01ba 04       		.byte	0x4
 536 01bb 05       		.byte	0x5
 537 01bc 02040000 		.4byte	.LASF61
 538 01c0 06       		.uleb128 0x6
 539 01c1 28010000 		.4byte	.LASF62
 540 01c5 04       		.byte	0x4
 541 01c6 50       		.byte	0x50
 542 01c7 CB010000 		.4byte	0x1cb
 543 01cb 05       		.uleb128 0x5
 544 01cc 04       		.byte	0x4
 545 01cd 07       		.byte	0x7
 546 01ce A1040000 		.4byte	.LASF63
 547 01d2 05       		.uleb128 0x5
 548 01d3 08       		.byte	0x8
 549 01d4 05       		.byte	0x5
 550 01d5 72020000 		.4byte	.LASF64
 551 01d9 05       		.uleb128 0x5
 552 01da 08       		.byte	0x8
 553 01db 07       		.byte	0x7
 554 01dc 7D010000 		.4byte	.LASF65
 555 01e0 07       		.uleb128 0x7
 556 01e1 04       		.byte	0x4
 557 01e2 05       		.byte	0x5
 558 01e3 696E7400 		.ascii	"int\000"
 559 01e7 05       		.uleb128 0x5
 560 01e8 04       		.byte	0x4
 561 01e9 07       		.byte	0x7
 562 01ea 72000000 		.4byte	.LASF66
 563 01ee 08       		.uleb128 0x8
 564 01ef 040E     		.2byte	0xe04
 565 01f1 01       		.byte	0x1
 566 01f2 2801     		.2byte	0x128
 567 01f4 C6020000 		.4byte	0x2c6
 568 01f8 09       		.uleb128 0x9
 569 01f9 48010000 		.4byte	.LASF67
 570 01fd 01       		.byte	0x1
 571 01fe 2A01     		.2byte	0x12a
 572 0200 DD020000 		.4byte	0x2dd
 573 0204 02       		.byte	0x2
 574 0205 23       		.byte	0x23
 575 0206 00       		.uleb128 0
 576 0207 09       		.uleb128 0x9
 577 0208 B5030000 		.4byte	.LASF68
 578 020c 01       		.byte	0x1
 579 020d 2B01     		.2byte	0x12b
 580 020f E2020000 		.4byte	0x2e2
 581 0213 02       		.byte	0x2
 582 0214 23       		.byte	0x23
ARM GAS  /tmp/cc2NM2Xt.s 			page 40


 583 0215 20       		.uleb128 0x20
 584 0216 09       		.uleb128 0x9
 585 0217 50050000 		.4byte	.LASF69
 586 021b 01       		.byte	0x1
 587 021c 2C01     		.2byte	0x12c
 588 021e F2020000 		.4byte	0x2f2
 589 0222 03       		.byte	0x3
 590 0223 23       		.byte	0x23
 591 0224 8001     		.uleb128 0x80
 592 0226 09       		.uleb128 0x9
 593 0227 4D010000 		.4byte	.LASF70
 594 022b 01       		.byte	0x1
 595 022c 2D01     		.2byte	0x12d
 596 022e E2020000 		.4byte	0x2e2
 597 0232 03       		.byte	0x3
 598 0233 23       		.byte	0x23
 599 0234 A001     		.uleb128 0xa0
 600 0236 09       		.uleb128 0x9
 601 0237 F0050000 		.4byte	.LASF71
 602 023b 01       		.byte	0x1
 603 023c 2E01     		.2byte	0x12e
 604 023e F7020000 		.4byte	0x2f7
 605 0242 03       		.byte	0x3
 606 0243 23       		.byte	0x23
 607 0244 8002     		.uleb128 0x100
 608 0246 09       		.uleb128 0x9
 609 0247 BF030000 		.4byte	.LASF72
 610 024b 01       		.byte	0x1
 611 024c 2F01     		.2byte	0x12f
 612 024e E2020000 		.4byte	0x2e2
 613 0252 03       		.byte	0x3
 614 0253 23       		.byte	0x23
 615 0254 A002     		.uleb128 0x120
 616 0256 09       		.uleb128 0x9
 617 0257 50030000 		.4byte	.LASF73
 618 025b 01       		.byte	0x1
 619 025c 3001     		.2byte	0x130
 620 025e FC020000 		.4byte	0x2fc
 621 0262 03       		.byte	0x3
 622 0263 23       		.byte	0x23
 623 0264 8003     		.uleb128 0x180
 624 0266 09       		.uleb128 0x9
 625 0267 C9030000 		.4byte	.LASF74
 626 026b 01       		.byte	0x1
 627 026c 3101     		.2byte	0x131
 628 026e E2020000 		.4byte	0x2e2
 629 0272 03       		.byte	0x3
 630 0273 23       		.byte	0x23
 631 0274 A003     		.uleb128 0x1a0
 632 0276 09       		.uleb128 0x9
 633 0277 6F050000 		.4byte	.LASF75
 634 027b 01       		.byte	0x1
 635 027c 3201     		.2byte	0x132
 636 027e 01030000 		.4byte	0x301
 637 0282 03       		.byte	0x3
 638 0283 23       		.byte	0x23
 639 0284 8004     		.uleb128 0x200
ARM GAS  /tmp/cc2NM2Xt.s 			page 41


 640 0286 09       		.uleb128 0x9
 641 0287 D3030000 		.4byte	.LASF76
 642 028b 01       		.byte	0x1
 643 028c 3301     		.2byte	0x133
 644 028e 06030000 		.4byte	0x306
 645 0292 03       		.byte	0x3
 646 0293 23       		.byte	0x23
 647 0294 A004     		.uleb128 0x220
 648 0296 0A       		.uleb128 0xa
 649 0297 495000   		.ascii	"IP\000"
 650 029a 01       		.byte	0x1
 651 029b 3401     		.2byte	0x134
 652 029d 26030000 		.4byte	0x326
 653 02a1 03       		.byte	0x3
 654 02a2 23       		.byte	0x23
 655 02a3 8006     		.uleb128 0x300
 656 02a5 09       		.uleb128 0x9
 657 02a6 DD030000 		.4byte	.LASF77
 658 02aa 01       		.byte	0x1
 659 02ab 3501     		.2byte	0x135
 660 02ad 2B030000 		.4byte	0x32b
 661 02b1 03       		.byte	0x3
 662 02b2 23       		.byte	0x23
 663 02b3 F007     		.uleb128 0x3f0
 664 02b5 09       		.uleb128 0x9
 665 02b6 9B030000 		.4byte	.LASF78
 666 02ba 01       		.byte	0x1
 667 02bb 3601     		.2byte	0x136
 668 02bd 3C030000 		.4byte	0x33c
 669 02c1 03       		.byte	0x3
 670 02c2 23       		.byte	0x23
 671 02c3 801C     		.uleb128 0xe00
 672 02c5 00       		.byte	0
 673 02c6 0B       		.uleb128 0xb
 674 02c7 C0010000 		.4byte	0x1c0
 675 02cb D6020000 		.4byte	0x2d6
 676 02cf 0C       		.uleb128 0xc
 677 02d0 D6020000 		.4byte	0x2d6
 678 02d4 07       		.byte	0x7
 679 02d5 00       		.byte	0
 680 02d6 05       		.uleb128 0x5
 681 02d7 04       		.byte	0x4
 682 02d8 07       		.byte	0x7
 683 02d9 93040000 		.4byte	.LASF79
 684 02dd 0D       		.uleb128 0xd
 685 02de C6020000 		.4byte	0x2c6
 686 02e2 0B       		.uleb128 0xb
 687 02e3 C0010000 		.4byte	0x1c0
 688 02e7 F2020000 		.4byte	0x2f2
 689 02eb 0C       		.uleb128 0xc
 690 02ec D6020000 		.4byte	0x2d6
 691 02f0 17       		.byte	0x17
 692 02f1 00       		.byte	0
 693 02f2 0D       		.uleb128 0xd
 694 02f3 C6020000 		.4byte	0x2c6
 695 02f7 0D       		.uleb128 0xd
 696 02f8 C6020000 		.4byte	0x2c6
ARM GAS  /tmp/cc2NM2Xt.s 			page 42


 697 02fc 0D       		.uleb128 0xd
 698 02fd C6020000 		.4byte	0x2c6
 699 0301 0D       		.uleb128 0xd
 700 0302 C6020000 		.4byte	0x2c6
 701 0306 0B       		.uleb128 0xb
 702 0307 C0010000 		.4byte	0x1c0
 703 030b 16030000 		.4byte	0x316
 704 030f 0C       		.uleb128 0xc
 705 0310 D6020000 		.4byte	0x2d6
 706 0314 37       		.byte	0x37
 707 0315 00       		.byte	0
 708 0316 0B       		.uleb128 0xb
 709 0317 83010000 		.4byte	0x183
 710 031b 26030000 		.4byte	0x326
 711 031f 0C       		.uleb128 0xc
 712 0320 D6020000 		.4byte	0x2d6
 713 0324 EF       		.byte	0xef
 714 0325 00       		.byte	0
 715 0326 0D       		.uleb128 0xd
 716 0327 16030000 		.4byte	0x316
 717 032b 0B       		.uleb128 0xb
 718 032c C0010000 		.4byte	0x1c0
 719 0330 3C030000 		.4byte	0x33c
 720 0334 0E       		.uleb128 0xe
 721 0335 D6020000 		.4byte	0x2d6
 722 0339 8302     		.2byte	0x283
 723 033b 00       		.byte	0
 724 033c 0D       		.uleb128 0xd
 725 033d C0010000 		.4byte	0x1c0
 726 0341 04       		.uleb128 0x4
 727 0342 5C040000 		.4byte	.LASF80
 728 0346 01       		.byte	0x1
 729 0347 3701     		.2byte	0x137
 730 0349 EE010000 		.4byte	0x1ee
 731 034d 0F       		.uleb128 0xf
 732 034e 8C       		.byte	0x8c
 733 034f 01       		.byte	0x1
 734 0350 4801     		.2byte	0x148
 735 0352 93040000 		.4byte	0x493
 736 0356 09       		.uleb128 0x9
 737 0357 C5010000 		.4byte	.LASF81
 738 035b 01       		.byte	0x1
 739 035c 4A01     		.2byte	0x14a
 740 035e 93040000 		.4byte	0x493
 741 0362 02       		.byte	0x2
 742 0363 23       		.byte	0x23
 743 0364 00       		.uleb128 0
 744 0365 09       		.uleb128 0x9
 745 0366 9C040000 		.4byte	.LASF82
 746 036a 01       		.byte	0x1
 747 036b 4B01     		.2byte	0x14b
 748 036d 3C030000 		.4byte	0x33c
 749 0371 02       		.byte	0x2
 750 0372 23       		.byte	0x23
 751 0373 04       		.uleb128 0x4
 752 0374 09       		.uleb128 0x9
 753 0375 74040000 		.4byte	.LASF83
ARM GAS  /tmp/cc2NM2Xt.s 			page 43


 754 0379 01       		.byte	0x1
 755 037a 4C01     		.2byte	0x14c
 756 037c 3C030000 		.4byte	0x33c
 757 0380 02       		.byte	0x2
 758 0381 23       		.byte	0x23
 759 0382 08       		.uleb128 0x8
 760 0383 09       		.uleb128 0x9
 761 0384 3C020000 		.4byte	.LASF84
 762 0388 01       		.byte	0x1
 763 0389 4D01     		.2byte	0x14d
 764 038b 3C030000 		.4byte	0x33c
 765 038f 02       		.byte	0x2
 766 0390 23       		.byte	0x23
 767 0391 0C       		.uleb128 0xc
 768 0392 0A       		.uleb128 0xa
 769 0393 53435200 		.ascii	"SCR\000"
 770 0397 01       		.byte	0x1
 771 0398 4E01     		.2byte	0x14e
 772 039a 3C030000 		.4byte	0x33c
 773 039e 02       		.byte	0x2
 774 039f 23       		.byte	0x23
 775 03a0 10       		.uleb128 0x10
 776 03a1 0A       		.uleb128 0xa
 777 03a2 43435200 		.ascii	"CCR\000"
 778 03a6 01       		.byte	0x1
 779 03a7 4F01     		.2byte	0x14f
 780 03a9 3C030000 		.4byte	0x33c
 781 03ad 02       		.byte	0x2
 782 03ae 23       		.byte	0x23
 783 03af 14       		.uleb128 0x14
 784 03b0 0A       		.uleb128 0xa
 785 03b1 53485000 		.ascii	"SHP\000"
 786 03b5 01       		.byte	0x1
 787 03b6 5001     		.2byte	0x150
 788 03b8 A8040000 		.4byte	0x4a8
 789 03bc 02       		.byte	0x2
 790 03bd 23       		.byte	0x23
 791 03be 18       		.uleb128 0x18
 792 03bf 09       		.uleb128 0x9
 793 03c0 8A020000 		.4byte	.LASF85
 794 03c4 01       		.byte	0x1
 795 03c5 5101     		.2byte	0x151
 796 03c7 3C030000 		.4byte	0x33c
 797 03cb 02       		.byte	0x2
 798 03cc 23       		.byte	0x23
 799 03cd 24       		.uleb128 0x24
 800 03ce 09       		.uleb128 0x9
 801 03cf 90020000 		.4byte	.LASF86
 802 03d3 01       		.byte	0x1
 803 03d4 5201     		.2byte	0x152
 804 03d6 3C030000 		.4byte	0x33c
 805 03da 02       		.byte	0x2
 806 03db 23       		.byte	0x23
 807 03dc 28       		.uleb128 0x28
 808 03dd 09       		.uleb128 0x9
 809 03de 24020000 		.4byte	.LASF87
 810 03e2 01       		.byte	0x1
ARM GAS  /tmp/cc2NM2Xt.s 			page 44


 811 03e3 5301     		.2byte	0x153
 812 03e5 3C030000 		.4byte	0x33c
 813 03e9 02       		.byte	0x2
 814 03ea 23       		.byte	0x23
 815 03eb 2C       		.uleb128 0x2c
 816 03ec 09       		.uleb128 0x9
 817 03ed 84000000 		.4byte	.LASF88
 818 03f1 01       		.byte	0x1
 819 03f2 5401     		.2byte	0x154
 820 03f4 3C030000 		.4byte	0x33c
 821 03f8 02       		.byte	0x2
 822 03f9 23       		.byte	0x23
 823 03fa 30       		.uleb128 0x30
 824 03fb 09       		.uleb128 0x9
 825 03fc A0030000 		.4byte	.LASF89
 826 0400 01       		.byte	0x1
 827 0401 5501     		.2byte	0x155
 828 0403 3C030000 		.4byte	0x33c
 829 0407 02       		.byte	0x2
 830 0408 23       		.byte	0x23
 831 0409 34       		.uleb128 0x34
 832 040a 09       		.uleb128 0x9
 833 040b 6F040000 		.4byte	.LASF90
 834 040f 01       		.byte	0x1
 835 0410 5601     		.2byte	0x156
 836 0412 3C030000 		.4byte	0x33c
 837 0416 02       		.byte	0x2
 838 0417 23       		.byte	0x23
 839 0418 38       		.uleb128 0x38
 840 0419 09       		.uleb128 0x9
 841 041a E8010000 		.4byte	.LASF91
 842 041e 01       		.byte	0x1
 843 041f 5701     		.2byte	0x157
 844 0421 3C030000 		.4byte	0x33c
 845 0425 02       		.byte	0x2
 846 0426 23       		.byte	0x23
 847 0427 3C       		.uleb128 0x3c
 848 0428 0A       		.uleb128 0xa
 849 0429 50465200 		.ascii	"PFR\000"
 850 042d 01       		.byte	0x1
 851 042e 5801     		.2byte	0x158
 852 0430 BD040000 		.4byte	0x4bd
 853 0434 02       		.byte	0x2
 854 0435 23       		.byte	0x23
 855 0436 40       		.uleb128 0x40
 856 0437 0A       		.uleb128 0xa
 857 0438 44465200 		.ascii	"DFR\000"
 858 043c 01       		.byte	0x1
 859 043d 5901     		.2byte	0x159
 860 043f 93040000 		.4byte	0x493
 861 0443 02       		.byte	0x2
 862 0444 23       		.byte	0x23
 863 0445 48       		.uleb128 0x48
 864 0446 0A       		.uleb128 0xa
 865 0447 41445200 		.ascii	"ADR\000"
 866 044b 01       		.byte	0x1
 867 044c 5A01     		.2byte	0x15a
ARM GAS  /tmp/cc2NM2Xt.s 			page 45


 868 044e 93040000 		.4byte	0x493
 869 0452 02       		.byte	0x2
 870 0453 23       		.byte	0x23
 871 0454 4C       		.uleb128 0x4c
 872 0455 09       		.uleb128 0x9
 873 0456 43010000 		.4byte	.LASF92
 874 045a 01       		.byte	0x1
 875 045b 5B01     		.2byte	0x15b
 876 045d D7040000 		.4byte	0x4d7
 877 0461 02       		.byte	0x2
 878 0462 23       		.byte	0x23
 879 0463 50       		.uleb128 0x50
 880 0464 09       		.uleb128 0x9
 881 0465 11060000 		.4byte	.LASF93
 882 0469 01       		.byte	0x1
 883 046a 5C01     		.2byte	0x15c
 884 046c F1040000 		.4byte	0x4f1
 885 0470 02       		.byte	0x2
 886 0471 23       		.byte	0x23
 887 0472 60       		.uleb128 0x60
 888 0473 09       		.uleb128 0x9
 889 0474 B5030000 		.4byte	.LASF68
 890 0478 01       		.byte	0x1
 891 0479 5D01     		.2byte	0x15d
 892 047b E1040000 		.4byte	0x4e1
 893 047f 02       		.byte	0x2
 894 0480 23       		.byte	0x23
 895 0481 74       		.uleb128 0x74
 896 0482 09       		.uleb128 0x9
 897 0483 0B000000 		.4byte	.LASF94
 898 0487 01       		.byte	0x1
 899 0488 5E01     		.2byte	0x15e
 900 048a 3C030000 		.4byte	0x33c
 901 048e 03       		.byte	0x3
 902 048f 23       		.byte	0x23
 903 0490 8801     		.uleb128 0x88
 904 0492 00       		.byte	0
 905 0493 10       		.uleb128 0x10
 906 0494 3C030000 		.4byte	0x33c
 907 0498 0B       		.uleb128 0xb
 908 0499 83010000 		.4byte	0x183
 909 049d A8040000 		.4byte	0x4a8
 910 04a1 0C       		.uleb128 0xc
 911 04a2 D6020000 		.4byte	0x2d6
 912 04a6 0B       		.byte	0xb
 913 04a7 00       		.byte	0
 914 04a8 0D       		.uleb128 0xd
 915 04a9 98040000 		.4byte	0x498
 916 04ad 0B       		.uleb128 0xb
 917 04ae C0010000 		.4byte	0x1c0
 918 04b2 BD040000 		.4byte	0x4bd
 919 04b6 0C       		.uleb128 0xc
 920 04b7 D6020000 		.4byte	0x2d6
 921 04bb 01       		.byte	0x1
 922 04bc 00       		.byte	0
 923 04bd 10       		.uleb128 0x10
 924 04be C2040000 		.4byte	0x4c2
ARM GAS  /tmp/cc2NM2Xt.s 			page 46


 925 04c2 0D       		.uleb128 0xd
 926 04c3 AD040000 		.4byte	0x4ad
 927 04c7 0B       		.uleb128 0xb
 928 04c8 C0010000 		.4byte	0x1c0
 929 04cc D7040000 		.4byte	0x4d7
 930 04d0 0C       		.uleb128 0xc
 931 04d1 D6020000 		.4byte	0x2d6
 932 04d5 03       		.byte	0x3
 933 04d6 00       		.byte	0
 934 04d7 10       		.uleb128 0x10
 935 04d8 DC040000 		.4byte	0x4dc
 936 04dc 0D       		.uleb128 0xd
 937 04dd C7040000 		.4byte	0x4c7
 938 04e1 0B       		.uleb128 0xb
 939 04e2 C0010000 		.4byte	0x1c0
 940 04e6 F1040000 		.4byte	0x4f1
 941 04ea 0C       		.uleb128 0xc
 942 04eb D6020000 		.4byte	0x2d6
 943 04ef 04       		.byte	0x4
 944 04f0 00       		.byte	0
 945 04f1 10       		.uleb128 0x10
 946 04f2 F6040000 		.4byte	0x4f6
 947 04f6 0D       		.uleb128 0xd
 948 04f7 E1040000 		.4byte	0x4e1
 949 04fb 04       		.uleb128 0x4
 950 04fc 66040000 		.4byte	.LASF95
 951 0500 01       		.byte	0x1
 952 0501 5F01     		.2byte	0x15f
 953 0503 4D030000 		.4byte	0x34d
 954 0507 0F       		.uleb128 0xf
 955 0508 10       		.byte	0x10
 956 0509 01       		.byte	0x1
 957 050a 4E02     		.2byte	0x24e
 958 050c 4D050000 		.4byte	0x54d
 959 0510 09       		.uleb128 0x9
 960 0511 34060000 		.4byte	.LASF96
 961 0515 01       		.byte	0x1
 962 0516 5002     		.2byte	0x250
 963 0518 3C030000 		.4byte	0x33c
 964 051c 02       		.byte	0x2
 965 051d 23       		.byte	0x23
 966 051e 00       		.uleb128 0
 967 051f 09       		.uleb128 0x9
 968 0520 7F000000 		.4byte	.LASF97
 969 0524 01       		.byte	0x1
 970 0525 5102     		.2byte	0x251
 971 0527 3C030000 		.4byte	0x33c
 972 052b 02       		.byte	0x2
 973 052c 23       		.byte	0x23
 974 052d 04       		.uleb128 0x4
 975 052e 0A       		.uleb128 0xa
 976 052f 56414C00 		.ascii	"VAL\000"
 977 0533 01       		.byte	0x1
 978 0534 5202     		.2byte	0x252
 979 0536 3C030000 		.4byte	0x33c
 980 053a 02       		.byte	0x2
 981 053b 23       		.byte	0x23
ARM GAS  /tmp/cc2NM2Xt.s 			page 47


 982 053c 08       		.uleb128 0x8
 983 053d 09       		.uleb128 0x9
 984 053e 94000000 		.4byte	.LASF98
 985 0542 01       		.byte	0x1
 986 0543 5302     		.2byte	0x253
 987 0545 93040000 		.4byte	0x493
 988 0549 02       		.byte	0x2
 989 054a 23       		.byte	0x23
 990 054b 0C       		.uleb128 0xc
 991 054c 00       		.byte	0
 992 054d 04       		.uleb128 0x4
 993 054e 75030000 		.4byte	.LASF99
 994 0552 01       		.byte	0x1
 995 0553 5402     		.2byte	0x254
 996 0555 07050000 		.4byte	0x507
 997 0559 11       		.uleb128 0x11
 998 055a 10       		.byte	0x10
 999 055b 05       		.byte	0x5
 1000 055c 32       		.byte	0x32
 1001 055d 9A050000 		.4byte	0x59a
 1002 0561 12       		.uleb128 0x12
 1003 0562 9E010000 		.4byte	.LASF100
 1004 0566 05       		.byte	0x5
 1005 0567 34       		.byte	0x34
 1006 0568 C0010000 		.4byte	0x1c0
 1007 056c 02       		.byte	0x2
 1008 056d 23       		.byte	0x23
 1009 056e 00       		.uleb128 0
 1010 056f 12       		.uleb128 0x12
 1011 0570 ED010000 		.4byte	.LASF101
 1012 0574 05       		.byte	0x5
 1013 0575 35       		.byte	0x35
 1014 0576 C0010000 		.4byte	0x1c0
 1015 057a 02       		.byte	0x2
 1016 057b 23       		.byte	0x23
 1017 057c 04       		.uleb128 0x4
 1018 057d 12       		.uleb128 0x12
 1019 057e 5F050000 		.4byte	.LASF102
 1020 0582 05       		.byte	0x5
 1021 0583 36       		.byte	0x36
 1022 0584 C0010000 		.4byte	0x1c0
 1023 0588 02       		.byte	0x2
 1024 0589 23       		.byte	0x23
 1025 058a 08       		.uleb128 0x8
 1026 058b 12       		.uleb128 0x12
 1027 058c 41040000 		.4byte	.LASF103
 1028 0590 05       		.byte	0x5
 1029 0591 37       		.byte	0x37
 1030 0592 C0010000 		.4byte	0x1c0
 1031 0596 02       		.byte	0x2
 1032 0597 23       		.byte	0x23
 1033 0598 0C       		.uleb128 0xc
 1034 0599 00       		.byte	0
 1035 059a 06       		.uleb128 0x6
 1036 059b 9A000000 		.4byte	.LASF104
 1037 059f 05       		.byte	0x5
 1038 05a0 38       		.byte	0x38
ARM GAS  /tmp/cc2NM2Xt.s 			page 48


 1039 05a1 59050000 		.4byte	0x559
 1040 05a5 13       		.uleb128 0x13
 1041 05a6 01       		.byte	0x1
 1042 05a7 06       		.byte	0x6
 1043 05a8 1D       		.byte	0x1d
 1044 05a9 D2050000 		.4byte	0x5d2
 1045 05ad 03       		.uleb128 0x3
 1046 05ae C5040000 		.4byte	.LASF105
 1047 05b2 00       		.sleb128 0
 1048 05b3 03       		.uleb128 0x3
 1049 05b4 D3040000 		.4byte	.LASF106
 1050 05b8 01       		.sleb128 1
 1051 05b9 03       		.uleb128 0x3
 1052 05ba 91050000 		.4byte	.LASF107
 1053 05be 02       		.sleb128 2
 1054 05bf 03       		.uleb128 0x3
 1055 05c0 9F050000 		.4byte	.LASF108
 1056 05c4 03       		.sleb128 3
 1057 05c5 03       		.uleb128 0x3
 1058 05c6 F5050000 		.4byte	.LASF109
 1059 05ca 04       		.sleb128 4
 1060 05cb 03       		.uleb128 0x3
 1061 05cc 03060000 		.4byte	.LASF110
 1062 05d0 05       		.sleb128 5
 1063 05d1 00       		.byte	0
 1064 05d2 14       		.uleb128 0x14
 1065 05d3 61000000 		.4byte	.LASF123
 1066 05d7 01       		.byte	0x1
 1067 05d8 7D05     		.2byte	0x57d
 1068 05da 01       		.byte	0x1
 1069 05db 00000000 		.4byte	.LFB47
 1070 05df 4C000000 		.4byte	.LFE47
 1071 05e3 00000000 		.4byte	.LLST0
 1072 05e7 01       		.byte	0x1
 1073 05e8 0B060000 		.4byte	0x60b
 1074 05ec 15       		.uleb128 0x15
 1075 05ed 96030000 		.4byte	.LASF111
 1076 05f1 01       		.byte	0x1
 1077 05f2 7D05     		.2byte	0x57d
 1078 05f4 70010000 		.4byte	0x170
 1079 05f8 02       		.byte	0x2
 1080 05f9 91       		.byte	0x91
 1081 05fa 7F       		.sleb128 -1
 1082 05fb 15       		.uleb128 0x15
 1083 05fc 38040000 		.4byte	.LASF112
 1084 0600 01       		.byte	0x1
 1085 0601 7D05     		.2byte	0x57d
 1086 0603 C0010000 		.4byte	0x1c0
 1087 0607 02       		.byte	0x2
 1088 0608 91       		.byte	0x91
 1089 0609 78       		.sleb128 -8
 1090 060a 00       		.byte	0
 1091 060b 16       		.uleb128 0x16
 1092 060c D9010000 		.4byte	.LASF124
 1093 0610 01       		.byte	0x1
 1094 0611 FC05     		.2byte	0x5fc
 1095 0613 01       		.byte	0x1
ARM GAS  /tmp/cc2NM2Xt.s 			page 49


 1096 0614 C0010000 		.4byte	0x1c0
 1097 0618 4C000000 		.4byte	.LFB52
 1098 061c 8C000000 		.4byte	.LFE52
 1099 0620 20000000 		.4byte	.LLST1
 1100 0624 01       		.byte	0x1
 1101 0625 39060000 		.4byte	0x639
 1102 0629 15       		.uleb128 0x15
 1103 062a 11020000 		.4byte	.LASF113
 1104 062e 01       		.byte	0x1
 1105 062f FC05     		.2byte	0x5fc
 1106 0631 C0010000 		.4byte	0x1c0
 1107 0635 02       		.byte	0x2
 1108 0636 91       		.byte	0x91
 1109 0637 74       		.sleb128 -12
 1110 0638 00       		.byte	0
 1111 0639 17       		.uleb128 0x17
 1112 063a 01       		.byte	0x1
 1113 063b EB050000 		.4byte	.LASF125
 1114 063f 02       		.byte	0x2
 1115 0640 33       		.byte	0x33
 1116 0641 01       		.byte	0x1
 1117 0642 E0010000 		.4byte	0x1e0
 1118 0646 8C000000 		.4byte	.LFB56
 1119 064a DC000000 		.4byte	.LFE56
 1120 064e 4C000000 		.4byte	.LLST2
 1121 0652 01       		.byte	0x1
 1122 0653 74060000 		.4byte	0x674
 1123 0657 18       		.uleb128 0x18
 1124 0658 82030000 		.4byte	.LASF114
 1125 065c 02       		.byte	0x2
 1126 065d 35       		.byte	0x35
 1127 065e 9A050000 		.4byte	0x59a
 1128 0662 02       		.byte	0x2
 1129 0663 91       		.byte	0x91
 1130 0664 64       		.sleb128 -28
 1131 0665 18       		.uleb128 0x18
 1132 0666 ED040000 		.4byte	.LASF115
 1133 066a 02       		.byte	0x2
 1134 066b 36       		.byte	0x36
 1135 066c 9C010000 		.4byte	0x19c
 1136 0670 02       		.byte	0x2
 1137 0671 91       		.byte	0x91
 1138 0672 76       		.sleb128 -10
 1139 0673 00       		.byte	0
 1140 0674 19       		.uleb128 0x19
 1141 0675 01       		.byte	0x1
 1142 0676 34050000 		.4byte	.LASF126
 1143 067a 02       		.byte	0x2
 1144 067b 50       		.byte	0x50
 1145 067c 01       		.byte	0x1
 1146 067d DC000000 		.4byte	.LFB57
 1147 0681 F8000000 		.4byte	.LFE57
 1148 0685 78000000 		.4byte	.LLST3
 1149 0689 01       		.byte	0x1
 1150 068a 9D060000 		.4byte	0x69d
 1151 068e 1A       		.uleb128 0x1a
 1152 068f 2E060000 		.4byte	.LASF116
ARM GAS  /tmp/cc2NM2Xt.s 			page 50


 1153 0693 02       		.byte	0x2
 1154 0694 50       		.byte	0x50
 1155 0695 3C030000 		.4byte	0x33c
 1156 0699 02       		.byte	0x2
 1157 069a 91       		.byte	0x91
 1158 069b 7C       		.sleb128 -4
 1159 069c 00       		.byte	0
 1160 069d 1B       		.uleb128 0x1b
 1161 069e 01       		.byte	0x1
 1162 069f 3A050000 		.4byte	.LASF127
 1163 06a3 02       		.byte	0x2
 1164 06a4 5C       		.byte	0x5c
 1165 06a5 01       		.byte	0x1
 1166 06a6 F8000000 		.4byte	.LFB58
 1167 06aa 10010000 		.4byte	.LFE58
 1168 06ae 02       		.byte	0x2
 1169 06af 7D       		.byte	0x7d
 1170 06b0 00       		.sleb128 0
 1171 06b1 01       		.byte	0x1
 1172 06b2 18       		.uleb128 0x18
 1173 06b3 F2000000 		.4byte	.LASF117
 1174 06b7 02       		.byte	0x2
 1175 06b8 28       		.byte	0x28
 1176 06b9 3C030000 		.4byte	0x33c
 1177 06bd 05       		.byte	0x5
 1178 06be 03       		.byte	0x3
 1179 06bf 00000000 		.4byte	TimingDelay
 1180 06c3 1C       		.uleb128 0x1c
 1181 06c4 17040000 		.4byte	.LASF118
 1182 06c8 01       		.byte	0x1
 1183 06c9 1606     		.2byte	0x616
 1184 06cb D1060000 		.4byte	0x6d1
 1185 06cf 01       		.byte	0x1
 1186 06d0 01       		.byte	0x1
 1187 06d1 0D       		.uleb128 0xd
 1188 06d2 AE010000 		.4byte	0x1ae
 1189 06d6 1D       		.uleb128 0x1d
 1190 06d7 07010000 		.4byte	.LASF119
 1191 06db 02       		.byte	0x2
 1192 06dc 29       		.byte	0x29
 1193 06dd 83010000 		.4byte	0x183
 1194 06e1 01       		.byte	0x1
 1195 06e2 05       		.byte	0x5
 1196 06e3 03       		.byte	0x3
 1197 06e4 00000000 		.4byte	BlinkSpeed
 1198 06e8 00       		.byte	0
 1199              		.section	.debug_abbrev,"",%progbits
 1200              	.Ldebug_abbrev0:
 1201 0000 01       		.uleb128 0x1
 1202 0001 11       		.uleb128 0x11
 1203 0002 01       		.byte	0x1
 1204 0003 25       		.uleb128 0x25
 1205 0004 0E       		.uleb128 0xe
 1206 0005 13       		.uleb128 0x13
 1207 0006 0B       		.uleb128 0xb
 1208 0007 03       		.uleb128 0x3
 1209 0008 0E       		.uleb128 0xe
ARM GAS  /tmp/cc2NM2Xt.s 			page 51


 1210 0009 1B       		.uleb128 0x1b
 1211 000a 0E       		.uleb128 0xe
 1212 000b 11       		.uleb128 0x11
 1213 000c 01       		.uleb128 0x1
 1214 000d 12       		.uleb128 0x12
 1215 000e 01       		.uleb128 0x1
 1216 000f 10       		.uleb128 0x10
 1217 0010 06       		.uleb128 0x6
 1218 0011 00       		.byte	0
 1219 0012 00       		.byte	0
 1220 0013 02       		.uleb128 0x2
 1221 0014 04       		.uleb128 0x4
 1222 0015 01       		.byte	0x1
 1223 0016 03       		.uleb128 0x3
 1224 0017 0E       		.uleb128 0xe
 1225 0018 0B       		.uleb128 0xb
 1226 0019 0B       		.uleb128 0xb
 1227 001a 3A       		.uleb128 0x3a
 1228 001b 0B       		.uleb128 0xb
 1229 001c 3B       		.uleb128 0x3b
 1230 001d 0B       		.uleb128 0xb
 1231 001e 01       		.uleb128 0x1
 1232 001f 13       		.uleb128 0x13
 1233 0020 00       		.byte	0
 1234 0021 00       		.byte	0
 1235 0022 03       		.uleb128 0x3
 1236 0023 28       		.uleb128 0x28
 1237 0024 00       		.byte	0
 1238 0025 03       		.uleb128 0x3
 1239 0026 0E       		.uleb128 0xe
 1240 0027 1C       		.uleb128 0x1c
 1241 0028 0D       		.uleb128 0xd
 1242 0029 00       		.byte	0
 1243 002a 00       		.byte	0
 1244 002b 04       		.uleb128 0x4
 1245 002c 16       		.uleb128 0x16
 1246 002d 00       		.byte	0
 1247 002e 03       		.uleb128 0x3
 1248 002f 0E       		.uleb128 0xe
 1249 0030 3A       		.uleb128 0x3a
 1250 0031 0B       		.uleb128 0xb
 1251 0032 3B       		.uleb128 0x3b
 1252 0033 05       		.uleb128 0x5
 1253 0034 49       		.uleb128 0x49
 1254 0035 13       		.uleb128 0x13
 1255 0036 00       		.byte	0
 1256 0037 00       		.byte	0
 1257 0038 05       		.uleb128 0x5
 1258 0039 24       		.uleb128 0x24
 1259 003a 00       		.byte	0
 1260 003b 0B       		.uleb128 0xb
 1261 003c 0B       		.uleb128 0xb
 1262 003d 3E       		.uleb128 0x3e
 1263 003e 0B       		.uleb128 0xb
 1264 003f 03       		.uleb128 0x3
 1265 0040 0E       		.uleb128 0xe
 1266 0041 00       		.byte	0
ARM GAS  /tmp/cc2NM2Xt.s 			page 52


 1267 0042 00       		.byte	0
 1268 0043 06       		.uleb128 0x6
 1269 0044 16       		.uleb128 0x16
 1270 0045 00       		.byte	0
 1271 0046 03       		.uleb128 0x3
 1272 0047 0E       		.uleb128 0xe
 1273 0048 3A       		.uleb128 0x3a
 1274 0049 0B       		.uleb128 0xb
 1275 004a 3B       		.uleb128 0x3b
 1276 004b 0B       		.uleb128 0xb
 1277 004c 49       		.uleb128 0x49
 1278 004d 13       		.uleb128 0x13
 1279 004e 00       		.byte	0
 1280 004f 00       		.byte	0
 1281 0050 07       		.uleb128 0x7
 1282 0051 24       		.uleb128 0x24
 1283 0052 00       		.byte	0
 1284 0053 0B       		.uleb128 0xb
 1285 0054 0B       		.uleb128 0xb
 1286 0055 3E       		.uleb128 0x3e
 1287 0056 0B       		.uleb128 0xb
 1288 0057 03       		.uleb128 0x3
 1289 0058 08       		.uleb128 0x8
 1290 0059 00       		.byte	0
 1291 005a 00       		.byte	0
 1292 005b 08       		.uleb128 0x8
 1293 005c 13       		.uleb128 0x13
 1294 005d 01       		.byte	0x1
 1295 005e 0B       		.uleb128 0xb
 1296 005f 05       		.uleb128 0x5
 1297 0060 3A       		.uleb128 0x3a
 1298 0061 0B       		.uleb128 0xb
 1299 0062 3B       		.uleb128 0x3b
 1300 0063 05       		.uleb128 0x5
 1301 0064 01       		.uleb128 0x1
 1302 0065 13       		.uleb128 0x13
 1303 0066 00       		.byte	0
 1304 0067 00       		.byte	0
 1305 0068 09       		.uleb128 0x9
 1306 0069 0D       		.uleb128 0xd
 1307 006a 00       		.byte	0
 1308 006b 03       		.uleb128 0x3
 1309 006c 0E       		.uleb128 0xe
 1310 006d 3A       		.uleb128 0x3a
 1311 006e 0B       		.uleb128 0xb
 1312 006f 3B       		.uleb128 0x3b
 1313 0070 05       		.uleb128 0x5
 1314 0071 49       		.uleb128 0x49
 1315 0072 13       		.uleb128 0x13
 1316 0073 38       		.uleb128 0x38
 1317 0074 0A       		.uleb128 0xa
 1318 0075 00       		.byte	0
 1319 0076 00       		.byte	0
 1320 0077 0A       		.uleb128 0xa
 1321 0078 0D       		.uleb128 0xd
 1322 0079 00       		.byte	0
 1323 007a 03       		.uleb128 0x3
ARM GAS  /tmp/cc2NM2Xt.s 			page 53


 1324 007b 08       		.uleb128 0x8
 1325 007c 3A       		.uleb128 0x3a
 1326 007d 0B       		.uleb128 0xb
 1327 007e 3B       		.uleb128 0x3b
 1328 007f 05       		.uleb128 0x5
 1329 0080 49       		.uleb128 0x49
 1330 0081 13       		.uleb128 0x13
 1331 0082 38       		.uleb128 0x38
 1332 0083 0A       		.uleb128 0xa
 1333 0084 00       		.byte	0
 1334 0085 00       		.byte	0
 1335 0086 0B       		.uleb128 0xb
 1336 0087 01       		.uleb128 0x1
 1337 0088 01       		.byte	0x1
 1338 0089 49       		.uleb128 0x49
 1339 008a 13       		.uleb128 0x13
 1340 008b 01       		.uleb128 0x1
 1341 008c 13       		.uleb128 0x13
 1342 008d 00       		.byte	0
 1343 008e 00       		.byte	0
 1344 008f 0C       		.uleb128 0xc
 1345 0090 21       		.uleb128 0x21
 1346 0091 00       		.byte	0
 1347 0092 49       		.uleb128 0x49
 1348 0093 13       		.uleb128 0x13
 1349 0094 2F       		.uleb128 0x2f
 1350 0095 0B       		.uleb128 0xb
 1351 0096 00       		.byte	0
 1352 0097 00       		.byte	0
 1353 0098 0D       		.uleb128 0xd
 1354 0099 35       		.uleb128 0x35
 1355 009a 00       		.byte	0
 1356 009b 49       		.uleb128 0x49
 1357 009c 13       		.uleb128 0x13
 1358 009d 00       		.byte	0
 1359 009e 00       		.byte	0
 1360 009f 0E       		.uleb128 0xe
 1361 00a0 21       		.uleb128 0x21
 1362 00a1 00       		.byte	0
 1363 00a2 49       		.uleb128 0x49
 1364 00a3 13       		.uleb128 0x13
 1365 00a4 2F       		.uleb128 0x2f
 1366 00a5 05       		.uleb128 0x5
 1367 00a6 00       		.byte	0
 1368 00a7 00       		.byte	0
 1369 00a8 0F       		.uleb128 0xf
 1370 00a9 13       		.uleb128 0x13
 1371 00aa 01       		.byte	0x1
 1372 00ab 0B       		.uleb128 0xb
 1373 00ac 0B       		.uleb128 0xb
 1374 00ad 3A       		.uleb128 0x3a
 1375 00ae 0B       		.uleb128 0xb
 1376 00af 3B       		.uleb128 0x3b
 1377 00b0 05       		.uleb128 0x5
 1378 00b1 01       		.uleb128 0x1
 1379 00b2 13       		.uleb128 0x13
 1380 00b3 00       		.byte	0
ARM GAS  /tmp/cc2NM2Xt.s 			page 54


 1381 00b4 00       		.byte	0
 1382 00b5 10       		.uleb128 0x10
 1383 00b6 26       		.uleb128 0x26
 1384 00b7 00       		.byte	0
 1385 00b8 49       		.uleb128 0x49
 1386 00b9 13       		.uleb128 0x13
 1387 00ba 00       		.byte	0
 1388 00bb 00       		.byte	0
 1389 00bc 11       		.uleb128 0x11
 1390 00bd 13       		.uleb128 0x13
 1391 00be 01       		.byte	0x1
 1392 00bf 0B       		.uleb128 0xb
 1393 00c0 0B       		.uleb128 0xb
 1394 00c1 3A       		.uleb128 0x3a
 1395 00c2 0B       		.uleb128 0xb
 1396 00c3 3B       		.uleb128 0x3b
 1397 00c4 0B       		.uleb128 0xb
 1398 00c5 01       		.uleb128 0x1
 1399 00c6 13       		.uleb128 0x13
 1400 00c7 00       		.byte	0
 1401 00c8 00       		.byte	0
 1402 00c9 12       		.uleb128 0x12
 1403 00ca 0D       		.uleb128 0xd
 1404 00cb 00       		.byte	0
 1405 00cc 03       		.uleb128 0x3
 1406 00cd 0E       		.uleb128 0xe
 1407 00ce 3A       		.uleb128 0x3a
 1408 00cf 0B       		.uleb128 0xb
 1409 00d0 3B       		.uleb128 0x3b
 1410 00d1 0B       		.uleb128 0xb
 1411 00d2 49       		.uleb128 0x49
 1412 00d3 13       		.uleb128 0x13
 1413 00d4 38       		.uleb128 0x38
 1414 00d5 0A       		.uleb128 0xa
 1415 00d6 00       		.byte	0
 1416 00d7 00       		.byte	0
 1417 00d8 13       		.uleb128 0x13
 1418 00d9 04       		.uleb128 0x4
 1419 00da 01       		.byte	0x1
 1420 00db 0B       		.uleb128 0xb
 1421 00dc 0B       		.uleb128 0xb
 1422 00dd 3A       		.uleb128 0x3a
 1423 00de 0B       		.uleb128 0xb
 1424 00df 3B       		.uleb128 0x3b
 1425 00e0 0B       		.uleb128 0xb
 1426 00e1 01       		.uleb128 0x1
 1427 00e2 13       		.uleb128 0x13
 1428 00e3 00       		.byte	0
 1429 00e4 00       		.byte	0
 1430 00e5 14       		.uleb128 0x14
 1431 00e6 2E       		.uleb128 0x2e
 1432 00e7 01       		.byte	0x1
 1433 00e8 03       		.uleb128 0x3
 1434 00e9 0E       		.uleb128 0xe
 1435 00ea 3A       		.uleb128 0x3a
 1436 00eb 0B       		.uleb128 0xb
 1437 00ec 3B       		.uleb128 0x3b
ARM GAS  /tmp/cc2NM2Xt.s 			page 55


 1438 00ed 05       		.uleb128 0x5
 1439 00ee 27       		.uleb128 0x27
 1440 00ef 0C       		.uleb128 0xc
 1441 00f0 11       		.uleb128 0x11
 1442 00f1 01       		.uleb128 0x1
 1443 00f2 12       		.uleb128 0x12
 1444 00f3 01       		.uleb128 0x1
 1445 00f4 40       		.uleb128 0x40
 1446 00f5 06       		.uleb128 0x6
 1447 00f6 9742     		.uleb128 0x2117
 1448 00f8 0C       		.uleb128 0xc
 1449 00f9 01       		.uleb128 0x1
 1450 00fa 13       		.uleb128 0x13
 1451 00fb 00       		.byte	0
 1452 00fc 00       		.byte	0
 1453 00fd 15       		.uleb128 0x15
 1454 00fe 05       		.uleb128 0x5
 1455 00ff 00       		.byte	0
 1456 0100 03       		.uleb128 0x3
 1457 0101 0E       		.uleb128 0xe
 1458 0102 3A       		.uleb128 0x3a
 1459 0103 0B       		.uleb128 0xb
 1460 0104 3B       		.uleb128 0x3b
 1461 0105 05       		.uleb128 0x5
 1462 0106 49       		.uleb128 0x49
 1463 0107 13       		.uleb128 0x13
 1464 0108 02       		.uleb128 0x2
 1465 0109 0A       		.uleb128 0xa
 1466 010a 00       		.byte	0
 1467 010b 00       		.byte	0
 1468 010c 16       		.uleb128 0x16
 1469 010d 2E       		.uleb128 0x2e
 1470 010e 01       		.byte	0x1
 1471 010f 03       		.uleb128 0x3
 1472 0110 0E       		.uleb128 0xe
 1473 0111 3A       		.uleb128 0x3a
 1474 0112 0B       		.uleb128 0xb
 1475 0113 3B       		.uleb128 0x3b
 1476 0114 05       		.uleb128 0x5
 1477 0115 27       		.uleb128 0x27
 1478 0116 0C       		.uleb128 0xc
 1479 0117 49       		.uleb128 0x49
 1480 0118 13       		.uleb128 0x13
 1481 0119 11       		.uleb128 0x11
 1482 011a 01       		.uleb128 0x1
 1483 011b 12       		.uleb128 0x12
 1484 011c 01       		.uleb128 0x1
 1485 011d 40       		.uleb128 0x40
 1486 011e 06       		.uleb128 0x6
 1487 011f 9642     		.uleb128 0x2116
 1488 0121 0C       		.uleb128 0xc
 1489 0122 01       		.uleb128 0x1
 1490 0123 13       		.uleb128 0x13
 1491 0124 00       		.byte	0
 1492 0125 00       		.byte	0
 1493 0126 17       		.uleb128 0x17
 1494 0127 2E       		.uleb128 0x2e
ARM GAS  /tmp/cc2NM2Xt.s 			page 56


 1495 0128 01       		.byte	0x1
 1496 0129 3F       		.uleb128 0x3f
 1497 012a 0C       		.uleb128 0xc
 1498 012b 03       		.uleb128 0x3
 1499 012c 0E       		.uleb128 0xe
 1500 012d 3A       		.uleb128 0x3a
 1501 012e 0B       		.uleb128 0xb
 1502 012f 3B       		.uleb128 0x3b
 1503 0130 0B       		.uleb128 0xb
 1504 0131 27       		.uleb128 0x27
 1505 0132 0C       		.uleb128 0xc
 1506 0133 49       		.uleb128 0x49
 1507 0134 13       		.uleb128 0x13
 1508 0135 11       		.uleb128 0x11
 1509 0136 01       		.uleb128 0x1
 1510 0137 12       		.uleb128 0x12
 1511 0138 01       		.uleb128 0x1
 1512 0139 40       		.uleb128 0x40
 1513 013a 06       		.uleb128 0x6
 1514 013b 9642     		.uleb128 0x2116
 1515 013d 0C       		.uleb128 0xc
 1516 013e 01       		.uleb128 0x1
 1517 013f 13       		.uleb128 0x13
 1518 0140 00       		.byte	0
 1519 0141 00       		.byte	0
 1520 0142 18       		.uleb128 0x18
 1521 0143 34       		.uleb128 0x34
 1522 0144 00       		.byte	0
 1523 0145 03       		.uleb128 0x3
 1524 0146 0E       		.uleb128 0xe
 1525 0147 3A       		.uleb128 0x3a
 1526 0148 0B       		.uleb128 0xb
 1527 0149 3B       		.uleb128 0x3b
 1528 014a 0B       		.uleb128 0xb
 1529 014b 49       		.uleb128 0x49
 1530 014c 13       		.uleb128 0x13
 1531 014d 02       		.uleb128 0x2
 1532 014e 0A       		.uleb128 0xa
 1533 014f 00       		.byte	0
 1534 0150 00       		.byte	0
 1535 0151 19       		.uleb128 0x19
 1536 0152 2E       		.uleb128 0x2e
 1537 0153 01       		.byte	0x1
 1538 0154 3F       		.uleb128 0x3f
 1539 0155 0C       		.uleb128 0xc
 1540 0156 03       		.uleb128 0x3
 1541 0157 0E       		.uleb128 0xe
 1542 0158 3A       		.uleb128 0x3a
 1543 0159 0B       		.uleb128 0xb
 1544 015a 3B       		.uleb128 0x3b
 1545 015b 0B       		.uleb128 0xb
 1546 015c 27       		.uleb128 0x27
 1547 015d 0C       		.uleb128 0xc
 1548 015e 11       		.uleb128 0x11
 1549 015f 01       		.uleb128 0x1
 1550 0160 12       		.uleb128 0x12
 1551 0161 01       		.uleb128 0x1
ARM GAS  /tmp/cc2NM2Xt.s 			page 57


 1552 0162 40       		.uleb128 0x40
 1553 0163 06       		.uleb128 0x6
 1554 0164 9742     		.uleb128 0x2117
 1555 0166 0C       		.uleb128 0xc
 1556 0167 01       		.uleb128 0x1
 1557 0168 13       		.uleb128 0x13
 1558 0169 00       		.byte	0
 1559 016a 00       		.byte	0
 1560 016b 1A       		.uleb128 0x1a
 1561 016c 05       		.uleb128 0x5
 1562 016d 00       		.byte	0
 1563 016e 03       		.uleb128 0x3
 1564 016f 0E       		.uleb128 0xe
 1565 0170 3A       		.uleb128 0x3a
 1566 0171 0B       		.uleb128 0xb
 1567 0172 3B       		.uleb128 0x3b
 1568 0173 0B       		.uleb128 0xb
 1569 0174 49       		.uleb128 0x49
 1570 0175 13       		.uleb128 0x13
 1571 0176 02       		.uleb128 0x2
 1572 0177 0A       		.uleb128 0xa
 1573 0178 00       		.byte	0
 1574 0179 00       		.byte	0
 1575 017a 1B       		.uleb128 0x1b
 1576 017b 2E       		.uleb128 0x2e
 1577 017c 00       		.byte	0
 1578 017d 3F       		.uleb128 0x3f
 1579 017e 0C       		.uleb128 0xc
 1580 017f 03       		.uleb128 0x3
 1581 0180 0E       		.uleb128 0xe
 1582 0181 3A       		.uleb128 0x3a
 1583 0182 0B       		.uleb128 0xb
 1584 0183 3B       		.uleb128 0x3b
 1585 0184 0B       		.uleb128 0xb
 1586 0185 27       		.uleb128 0x27
 1587 0186 0C       		.uleb128 0xc
 1588 0187 11       		.uleb128 0x11
 1589 0188 01       		.uleb128 0x1
 1590 0189 12       		.uleb128 0x12
 1591 018a 01       		.uleb128 0x1
 1592 018b 40       		.uleb128 0x40
 1593 018c 0A       		.uleb128 0xa
 1594 018d 9742     		.uleb128 0x2117
 1595 018f 0C       		.uleb128 0xc
 1596 0190 00       		.byte	0
 1597 0191 00       		.byte	0
 1598 0192 1C       		.uleb128 0x1c
 1599 0193 34       		.uleb128 0x34
 1600 0194 00       		.byte	0
 1601 0195 03       		.uleb128 0x3
 1602 0196 0E       		.uleb128 0xe
 1603 0197 3A       		.uleb128 0x3a
 1604 0198 0B       		.uleb128 0xb
 1605 0199 3B       		.uleb128 0x3b
 1606 019a 05       		.uleb128 0x5
 1607 019b 49       		.uleb128 0x49
 1608 019c 13       		.uleb128 0x13
ARM GAS  /tmp/cc2NM2Xt.s 			page 58


 1609 019d 3F       		.uleb128 0x3f
 1610 019e 0C       		.uleb128 0xc
 1611 019f 3C       		.uleb128 0x3c
 1612 01a0 0C       		.uleb128 0xc
 1613 01a1 00       		.byte	0
 1614 01a2 00       		.byte	0
 1615 01a3 1D       		.uleb128 0x1d
 1616 01a4 34       		.uleb128 0x34
 1617 01a5 00       		.byte	0
 1618 01a6 03       		.uleb128 0x3
 1619 01a7 0E       		.uleb128 0xe
 1620 01a8 3A       		.uleb128 0x3a
 1621 01a9 0B       		.uleb128 0xb
 1622 01aa 3B       		.uleb128 0x3b
 1623 01ab 0B       		.uleb128 0xb
 1624 01ac 49       		.uleb128 0x49
 1625 01ad 13       		.uleb128 0x13
 1626 01ae 3F       		.uleb128 0x3f
 1627 01af 0C       		.uleb128 0xc
 1628 01b0 02       		.uleb128 0x2
 1629 01b1 0A       		.uleb128 0xa
 1630 01b2 00       		.byte	0
 1631 01b3 00       		.byte	0
 1632 01b4 00       		.byte	0
 1633              		.section	.debug_loc,"",%progbits
 1634              	.Ldebug_loc0:
 1635              	.LLST0:
 1636 0000 00000000 		.4byte	.LFB47-.Ltext0
 1637 0004 02000000 		.4byte	.LCFI0-.Ltext0
 1638 0008 0200     		.2byte	0x2
 1639 000a 7D       		.byte	0x7d
 1640 000b 00       		.sleb128 0
 1641 000c 02000000 		.4byte	.LCFI0-.Ltext0
 1642 0010 4C000000 		.4byte	.LFE47-.Ltext0
 1643 0014 0200     		.2byte	0x2
 1644 0016 7D       		.byte	0x7d
 1645 0017 08       		.sleb128 8
 1646 0018 00000000 		.4byte	0
 1647 001c 00000000 		.4byte	0
 1648              	.LLST1:
 1649 0020 4C000000 		.4byte	.LFB52-.Ltext0
 1650 0024 4E000000 		.4byte	.LCFI1-.Ltext0
 1651 0028 0200     		.2byte	0x2
 1652 002a 7D       		.byte	0x7d
 1653 002b 00       		.sleb128 0
 1654 002c 4E000000 		.4byte	.LCFI1-.Ltext0
 1655 0030 50000000 		.4byte	.LCFI2-.Ltext0
 1656 0034 0200     		.2byte	0x2
 1657 0036 7D       		.byte	0x7d
 1658 0037 04       		.sleb128 4
 1659 0038 50000000 		.4byte	.LCFI2-.Ltext0
 1660 003c 8C000000 		.4byte	.LFE52-.Ltext0
 1661 0040 0200     		.2byte	0x2
 1662 0042 7D       		.byte	0x7d
 1663 0043 10       		.sleb128 16
 1664 0044 00000000 		.4byte	0
 1665 0048 00000000 		.4byte	0
ARM GAS  /tmp/cc2NM2Xt.s 			page 59


 1666              	.LLST2:
 1667 004c 8C000000 		.4byte	.LFB56-.Ltext0
 1668 0050 8E000000 		.4byte	.LCFI3-.Ltext0
 1669 0054 0200     		.2byte	0x2
 1670 0056 7D       		.byte	0x7d
 1671 0057 00       		.sleb128 0
 1672 0058 8E000000 		.4byte	.LCFI3-.Ltext0
 1673 005c 90000000 		.4byte	.LCFI4-.Ltext0
 1674 0060 0200     		.2byte	0x2
 1675 0062 7D       		.byte	0x7d
 1676 0063 04       		.sleb128 4
 1677 0064 90000000 		.4byte	.LCFI4-.Ltext0
 1678 0068 DC000000 		.4byte	.LFE56-.Ltext0
 1679 006c 0200     		.2byte	0x2
 1680 006e 7D       		.byte	0x7d
 1681 006f 20       		.sleb128 32
 1682 0070 00000000 		.4byte	0
 1683 0074 00000000 		.4byte	0
 1684              	.LLST3:
 1685 0078 DC000000 		.4byte	.LFB57-.Ltext0
 1686 007c DE000000 		.4byte	.LCFI5-.Ltext0
 1687 0080 0200     		.2byte	0x2
 1688 0082 7D       		.byte	0x7d
 1689 0083 00       		.sleb128 0
 1690 0084 DE000000 		.4byte	.LCFI5-.Ltext0
 1691 0088 F8000000 		.4byte	.LFE57-.Ltext0
 1692 008c 0200     		.2byte	0x2
 1693 008e 7D       		.byte	0x7d
 1694 008f 08       		.sleb128 8
 1695 0090 00000000 		.4byte	0
 1696 0094 00000000 		.4byte	0
 1697              		.section	.debug_aranges,"",%progbits
 1698 0000 1C000000 		.4byte	0x1c
 1699 0004 0200     		.2byte	0x2
 1700 0006 00000000 		.4byte	.Ldebug_info0
 1701 000a 04       		.byte	0x4
 1702 000b 00       		.byte	0
 1703 000c 0000     		.2byte	0
 1704 000e 0000     		.2byte	0
 1705 0010 00000000 		.4byte	.Ltext0
 1706 0014 10010000 		.4byte	.Letext0-.Ltext0
 1707 0018 00000000 		.4byte	0
 1708 001c 00000000 		.4byte	0
 1709              		.section	.debug_line,"",%progbits
 1710              	.Ldebug_line0:
 1711 0000 5B010000 		.section	.debug_str,"MS",%progbits,1
 1711      0200F700 
 1711      00000201 
 1711      FB0E0D00 
 1711      01010101 
 1712              	.LASF35:
 1713 0000 54494D31 		.ascii	"TIM11_IRQn\000"
 1713      315F4952 
 1713      516E00
 1714              	.LASF94:
 1715 000b 43504143 		.ascii	"CPACR\000"
 1715      5200
ARM GAS  /tmp/cc2NM2Xt.s 			page 60


 1716              	.LASF33:
 1717 0011 54494D39 		.ascii	"TIM9_IRQn\000"
 1717      5F495251 
 1717      6E00
 1718              	.LASF25:
 1719 001b 444D4131 		.ascii	"DMA1_Channel7_IRQn\000"
 1719      5F436861 
 1719      6E6E656C 
 1719      375F4952 
 1719      516E00
 1720              	.LASF42:
 1721 002e 49324332 		.ascii	"I2C2_ER_IRQn\000"
 1721      5F45525F 
 1721      4952516E 
 1721      00
 1722              	.LASF4:
 1723 003b 5356435F 		.ascii	"SVC_IRQn\000"
 1723      4952516E 
 1723      00
 1724              	.LASF38:
 1725 0044 54494D34 		.ascii	"TIM4_IRQn\000"
 1725      5F495251 
 1725      6E00
 1726              	.LASF20:
 1727 004e 444D4131 		.ascii	"DMA1_Channel2_IRQn\000"
 1727      5F436861 
 1727      6E6E656C 
 1727      325F4952 
 1727      516E00
 1728              	.LASF123:
 1729 0061 4E564943 		.ascii	"NVIC_SetPriority\000"
 1729      5F536574 
 1729      5072696F 
 1729      72697479 
 1729      00
 1730              	.LASF66:
 1731 0072 756E7369 		.ascii	"unsigned int\000"
 1731      676E6564 
 1731      20696E74 
 1731      00
 1732              	.LASF97:
 1733 007f 4C4F4144 		.ascii	"LOAD\000"
 1733      00
 1734              	.LASF88:
 1735 0084 44465352 		.ascii	"DFSR\000"
 1735      00
 1736              	.LASF12:
 1737 0089 464C4153 		.ascii	"FLASH_IRQn\000"
 1737      485F4952 
 1737      516E00
 1738              	.LASF98:
 1739 0094 43414C49 		.ascii	"CALIB\000"
 1739      4200
 1740              	.LASF104:
 1741 009a 5243435F 		.ascii	"RCC_ClocksTypeDef\000"
 1741      436C6F63 
 1741      6B735479 
ARM GAS  /tmp/cc2NM2Xt.s 			page 61


 1741      70654465 
 1741      6600
 1742              	.LASF14:
 1743 00ac 45585449 		.ascii	"EXTI0_IRQn\000"
 1743      305F4952 
 1743      516E00
 1744              	.LASF122:
 1745 00b7 2F686F6D 		.ascii	"/home/zbanks/hackboard/firmware\000"
 1745      652F7A62 
 1745      616E6B73 
 1745      2F686163 
 1745      6B626F61 
 1746              	.LASF48:
 1747 00d7 45585449 		.ascii	"EXTI15_10_IRQn\000"
 1747      31355F31 
 1747      305F4952 
 1747      516E00
 1748              	.LASF6:
 1749 00e6 50656E64 		.ascii	"PendSV_IRQn\000"
 1749      53565F49 
 1749      52516E00 
 1750              	.LASF117:
 1751 00f2 54696D69 		.ascii	"TimingDelay\000"
 1751      6E674465 
 1751      6C617900 
 1752              	.LASF13:
 1753 00fe 5243435F 		.ascii	"RCC_IRQn\000"
 1753      4952516E 
 1753      00
 1754              	.LASF119:
 1755 0107 426C696E 		.ascii	"BlinkSpeed\000"
 1755      6B537065 
 1755      656400
 1756              	.LASF1:
 1757 0112 4D656D6F 		.ascii	"MemoryManagement_IRQn\000"
 1757      72794D61 
 1757      6E616765 
 1757      6D656E74 
 1757      5F495251 
 1758              	.LASF62:
 1759 0128 75696E74 		.ascii	"uint32_t\000"
 1759      33325F74 
 1759      00
 1760              	.LASF10:
 1761 0131 54414D50 		.ascii	"TAMPER_STAMP_IRQn\000"
 1761      45525F53 
 1761      54414D50 
 1761      5F495251 
 1761      6E00
 1762              	.LASF92:
 1763 0143 4D4D4652 		.ascii	"MMFR\000"
 1763      00
 1764              	.LASF67:
 1765 0148 49534552 		.ascii	"ISER\000"
 1765      00
 1766              	.LASF70:
 1767 014d 52534552 		.ascii	"RSERVED1\000"
ARM GAS  /tmp/cc2NM2Xt.s 			page 62


 1767      56454431 
 1767      00
 1768              	.LASF43:
 1769 0156 53504931 		.ascii	"SPI1_IRQn\000"
 1769      5F495251 
 1769      6E00
 1770              	.LASF51:
 1771 0160 54494D36 		.ascii	"TIM6_IRQn\000"
 1771      5F495251 
 1771      6E00
 1772              	.LASF22:
 1773 016a 444D4131 		.ascii	"DMA1_Channel4_IRQn\000"
 1773      5F436861 
 1773      6E6E656C 
 1773      345F4952 
 1773      516E00
 1774              	.LASF65:
 1775 017d 6C6F6E67 		.ascii	"long long unsigned int\000"
 1775      206C6F6E 
 1775      6720756E 
 1775      7369676E 
 1775      65642069 
 1776              	.LASF30:
 1777 0194 434F4D50 		.ascii	"COMP_IRQn\000"
 1777      5F495251 
 1777      6E00
 1778              	.LASF100:
 1779 019e 53595343 		.ascii	"SYSCLK_Frequency\000"
 1779      4C4B5F46 
 1779      72657175 
 1779      656E6379 
 1779      00
 1780              	.LASF53:
 1781 01af 4952516E 		.ascii	"IRQn_Type\000"
 1781      5F547970 
 1781      6500
 1782              	.LASF46:
 1783 01b9 55534152 		.ascii	"USART2_IRQn\000"
 1783      54325F49 
 1783      52516E00 
 1784              	.LASF81:
 1785 01c5 43505549 		.ascii	"CPUID\000"
 1785      4400
 1786              	.LASF11:
 1787 01cb 5254435F 		.ascii	"RTC_WKUP_IRQn\000"
 1787      574B5550 
 1787      5F495251 
 1787      6E00
 1788              	.LASF124:
 1789 01d9 53797354 		.ascii	"SysTick_Config\000"
 1789      69636B5F 
 1789      436F6E66 
 1789      696700
 1790              	.LASF91:
 1791 01e8 41465352 		.ascii	"AFSR\000"
 1791      00
 1792              	.LASF101:
ARM GAS  /tmp/cc2NM2Xt.s 			page 63


 1793 01ed 48434C4B 		.ascii	"HCLK_Frequency\000"
 1793      5F467265 
 1793      7175656E 
 1793      637900
 1794              	.LASF16:
 1795 01fc 45585449 		.ascii	"EXTI2_IRQn\000"
 1795      325F4952 
 1795      516E00
 1796              	.LASF26:
 1797 0207 41444331 		.ascii	"ADC1_IRQn\000"
 1797      5F495251 
 1797      6E00
 1798              	.LASF113:
 1799 0211 7469636B 		.ascii	"ticks\000"
 1799      7300
 1800              	.LASF41:
 1801 0217 49324332 		.ascii	"I2C2_EV_IRQn\000"
 1801      5F45565F 
 1801      4952516E 
 1801      00
 1802              	.LASF87:
 1803 0224 48465352 		.ascii	"HFSR\000"
 1803      00
 1804              	.LASF24:
 1805 0229 444D4131 		.ascii	"DMA1_Channel6_IRQn\000"
 1805      5F436861 
 1805      6E6E656C 
 1805      365F4952 
 1805      516E00
 1806              	.LASF84:
 1807 023c 41495243 		.ascii	"AIRCR\000"
 1807      5200
 1808              	.LASF37:
 1809 0242 54494D33 		.ascii	"TIM3_IRQn\000"
 1809      5F495251 
 1809      6E00
 1810              	.LASF19:
 1811 024c 444D4131 		.ascii	"DMA1_Channel1_IRQn\000"
 1811      5F436861 
 1811      6E6E656C 
 1811      315F4952 
 1811      516E00
 1812              	.LASF54:
 1813 025f 75696E74 		.ascii	"uint8_t\000"
 1813      385F7400 
 1814              	.LASF34:
 1815 0267 54494D31 		.ascii	"TIM10_IRQn\000"
 1815      305F4952 
 1815      516E00
 1816              	.LASF64:
 1817 0272 6C6F6E67 		.ascii	"long long int\000"
 1817      206C6F6E 
 1817      6720696E 
 1817      7400
 1818              	.LASF8:
 1819 0280 57574447 		.ascii	"WWDG_IRQn\000"
 1819      5F495251 
ARM GAS  /tmp/cc2NM2Xt.s 			page 64


 1819      6E00
 1820              	.LASF85:
 1821 028a 53484353 		.ascii	"SHCSR\000"
 1821      5200
 1822              	.LASF86:
 1823 0290 43465352 		.ascii	"CFSR\000"
 1823      00
 1824              	.LASF2:
 1825 0295 42757346 		.ascii	"BusFault_IRQn\000"
 1825      61756C74 
 1825      5F495251 
 1825      6E00
 1826              	.LASF120:
 1827 02a3 474E5520 		.ascii	"GNU C 4.8.3 20131129 (release) [ARM/embedded-4_8-br"
 1827      4320342E 
 1827      382E3320 
 1827      32303133 
 1827      31313239 
 1828 02d6 616E6368 		.ascii	"anch revision 205641] -mcpu=cortex-m3 -mthumb -g -g"
 1828      20726576 
 1828      6973696F 
 1828      6E203230 
 1828      35363431 
 1829 0309 64776172 		.ascii	"dwarf-2 -O0 -std=c99 -fomit-frame-pointer\000"
 1829      662D3220 
 1829      2D4F3020 
 1829      2D737464 
 1829      3D633939 
 1830              	.LASF18:
 1831 0333 45585449 		.ascii	"EXTI4_IRQn\000"
 1831      345F4952 
 1831      516E00
 1832              	.LASF32:
 1833 033e 4C43445F 		.ascii	"LCD_IRQn\000"
 1833      4952516E 
 1833      00
 1834              	.LASF9:
 1835 0347 5056445F 		.ascii	"PVD_IRQn\000"
 1835      4952516E 
 1835      00
 1836              	.LASF73:
 1837 0350 49435052 		.ascii	"ICPR\000"
 1837      00
 1838              	.LASF21:
 1839 0355 444D4131 		.ascii	"DMA1_Channel3_IRQn\000"
 1839      5F436861 
 1839      6E6E656C 
 1839      335F4952 
 1839      516E00
 1840              	.LASF39:
 1841 0368 49324331 		.ascii	"I2C1_EV_IRQn\000"
 1841      5F45565F 
 1841      4952516E 
 1841      00
 1842              	.LASF99:
 1843 0375 53797354 		.ascii	"SysTick_Type\000"
 1843      69636B5F 
ARM GAS  /tmp/cc2NM2Xt.s 			page 65


 1843      54797065 
 1843      00
 1844              	.LASF114:
 1845 0382 5243435F 		.ascii	"RCC_Clocks\000"
 1845      436C6F63 
 1845      6B7300
 1846              	.LASF58:
 1847 038d 75696E74 		.ascii	"uint16_t\000"
 1847      31365F74 
 1847      00
 1848              	.LASF111:
 1849 0396 4952516E 		.ascii	"IRQn\000"
 1849      00
 1850              	.LASF78:
 1851 039b 53544952 		.ascii	"STIR\000"
 1851      00
 1852              	.LASF89:
 1853 03a0 4D4D4641 		.ascii	"MMFAR\000"
 1853      5200
 1854              	.LASF49:
 1855 03a6 5254435F 		.ascii	"RTC_Alarm_IRQn\000"
 1855      416C6172 
 1855      6D5F4952 
 1855      516E00
 1856              	.LASF68:
 1857 03b5 52455345 		.ascii	"RESERVED0\000"
 1857      52564544 
 1857      3000
 1858              	.LASF72:
 1859 03bf 52455345 		.ascii	"RESERVED2\000"
 1859      52564544 
 1859      3200
 1860              	.LASF74:
 1861 03c9 52455345 		.ascii	"RESERVED3\000"
 1861      52564544 
 1861      3300
 1862              	.LASF76:
 1863 03d3 52455345 		.ascii	"RESERVED4\000"
 1863      52564544 
 1863      3400
 1864              	.LASF77:
 1865 03dd 52455345 		.ascii	"RESERVED5\000"
 1865      52564544 
 1865      3500
 1866              	.LASF57:
 1867 03e7 73686F72 		.ascii	"short int\000"
 1867      7420696E 
 1867      7400
 1868              	.LASF50:
 1869 03f1 5553425F 		.ascii	"USB_FS_WKUP_IRQn\000"
 1869      46535F57 
 1869      4B55505F 
 1869      4952516E 
 1869      00
 1870              	.LASF61:
 1871 0402 6C6F6E67 		.ascii	"long int\000"
 1871      20696E74 
ARM GAS  /tmp/cc2NM2Xt.s 			page 66


 1871      00
 1872              	.LASF45:
 1873 040b 55534152 		.ascii	"USART1_IRQn\000"
 1873      54315F49 
 1873      52516E00 
 1874              	.LASF118:
 1875 0417 49544D5F 		.ascii	"ITM_RxBuffer\000"
 1875      52784275 
 1875      66666572 
 1875      00
 1876              	.LASF0:
 1877 0424 4E6F6E4D 		.ascii	"NonMaskableInt_IRQn\000"
 1877      61736B61 
 1877      626C6549 
 1877      6E745F49 
 1877      52516E00 
 1878              	.LASF112:
 1879 0438 7072696F 		.ascii	"priority\000"
 1879      72697479 
 1879      00
 1880              	.LASF103:
 1881 0441 50434C4B 		.ascii	"PCLK2_Frequency\000"
 1881      325F4672 
 1881      65717565 
 1881      6E637900 
 1882              	.LASF15:
 1883 0451 45585449 		.ascii	"EXTI1_IRQn\000"
 1883      315F4952 
 1883      516E00
 1884              	.LASF80:
 1885 045c 4E564943 		.ascii	"NVIC_Type\000"
 1885      5F547970 
 1885      6500
 1886              	.LASF95:
 1887 0466 5343425F 		.ascii	"SCB_Type\000"
 1887      54797065 
 1887      00
 1888              	.LASF90:
 1889 046f 42464152 		.ascii	"BFAR\000"
 1889      00
 1890              	.LASF83:
 1891 0474 56544F52 		.ascii	"VTOR\000"
 1891      00
 1892              	.LASF40:
 1893 0479 49324331 		.ascii	"I2C1_ER_IRQn\000"
 1893      5F45525F 
 1893      4952516E 
 1893      00
 1894              	.LASF7:
 1895 0486 53797354 		.ascii	"SysTick_IRQn\000"
 1895      69636B5F 
 1895      4952516E 
 1895      00
 1896              	.LASF79:
 1897 0493 73697A65 		.ascii	"sizetype\000"
 1897      74797065 
 1897      00
ARM GAS  /tmp/cc2NM2Xt.s 			page 67


 1898              	.LASF82:
 1899 049c 49435352 		.ascii	"ICSR\000"
 1899      00
 1900              	.LASF63:
 1901 04a1 6C6F6E67 		.ascii	"long unsigned int\000"
 1901      20756E73 
 1901      69676E65 
 1901      6420696E 
 1901      7400
 1902              	.LASF36:
 1903 04b3 54494D32 		.ascii	"TIM2_IRQn\000"
 1903      5F495251 
 1903      6E00
 1904              	.LASF60:
 1905 04bd 696E7433 		.ascii	"int32_t\000"
 1905      325F7400 
 1906              	.LASF105:
 1907 04c5 48425249 		.ascii	"HBRIDGE_CH_2A\000"
 1907      4447455F 
 1907      43485F32 
 1907      4100
 1908              	.LASF106:
 1909 04d3 48425249 		.ascii	"HBRIDGE_CH_2B\000"
 1909      4447455F 
 1909      43485F32 
 1909      4200
 1910              	.LASF27:
 1911 04e1 5553425F 		.ascii	"USB_HP_IRQn\000"
 1911      48505F49 
 1911      52516E00 
 1912              	.LASF115:
 1913 04ed 74656D70 		.ascii	"temp_volt\000"
 1913      5F766F6C 
 1913      7400
 1914              	.LASF5:
 1915 04f7 44656275 		.ascii	"DebugMonitor_IRQn\000"
 1915      674D6F6E 
 1915      69746F72 
 1915      5F495251 
 1915      6E00
 1916              	.LASF3:
 1917 0509 55736167 		.ascii	"UsageFault_IRQn\000"
 1917      65466175 
 1917      6C745F49 
 1917      52516E00 
 1918              	.LASF56:
 1919 0519 756E7369 		.ascii	"unsigned char\000"
 1919      676E6564 
 1919      20636861 
 1919      7200
 1920              	.LASF31:
 1921 0527 45585449 		.ascii	"EXTI9_5_IRQn\000"
 1921      395F355F 
 1921      4952516E 
 1921      00
 1922              	.LASF126:
 1923 0534 44656C61 		.ascii	"Delay\000"
ARM GAS  /tmp/cc2NM2Xt.s 			page 68


 1923      7900
 1924              	.LASF127:
 1925 053a 54696D69 		.ascii	"TimingDelay_Decrement\000"
 1925      6E674465 
 1925      6C61795F 
 1925      44656372 
 1925      656D656E 
 1926              	.LASF69:
 1927 0550 49434552 		.ascii	"ICER\000"
 1927      00
 1928              	.LASF44:
 1929 0555 53504932 		.ascii	"SPI2_IRQn\000"
 1929      5F495251 
 1929      6E00
 1930              	.LASF102:
 1931 055f 50434C4B 		.ascii	"PCLK1_Frequency\000"
 1931      315F4672 
 1931      65717565 
 1931      6E637900 
 1932              	.LASF75:
 1933 056f 49414252 		.ascii	"IABR\000"
 1933      00
 1934              	.LASF52:
 1935 0574 54494D37 		.ascii	"TIM7_IRQn\000"
 1935      5F495251 
 1935      6E00
 1936              	.LASF23:
 1937 057e 444D4131 		.ascii	"DMA1_Channel5_IRQn\000"
 1937      5F436861 
 1937      6E6E656C 
 1937      355F4952 
 1937      516E00
 1938              	.LASF107:
 1939 0591 48425249 		.ascii	"HBRIDGE_CH_3A\000"
 1939      4447455F 
 1939      43485F33 
 1939      4100
 1940              	.LASF108:
 1941 059f 48425249 		.ascii	"HBRIDGE_CH_3B\000"
 1941      4447455F 
 1941      43485F33 
 1941      4200
 1942              	.LASF29:
 1943 05ad 4441435F 		.ascii	"DAC_IRQn\000"
 1943      4952516E 
 1943      00
 1944              	.LASF55:
 1945 05b6 7369676E 		.ascii	"signed char\000"
 1945      65642063 
 1945      68617200 
 1946              	.LASF121:
 1947 05c2 7372632F 		.ascii	"src/main.c\000"
 1947      6D61696E 
 1947      2E6300
 1948              	.LASF59:
 1949 05cd 73686F72 		.ascii	"short unsigned int\000"
 1949      7420756E 
ARM GAS  /tmp/cc2NM2Xt.s 			page 69


 1949      7369676E 
 1949      65642069 
 1949      6E7400
 1950              	.LASF17:
 1951 05e0 45585449 		.ascii	"EXTI3_IRQn\000"
 1951      335F4952 
 1951      516E00
 1952              	.LASF125:
 1953 05eb 6D61696E 		.ascii	"main\000"
 1953      00
 1954              	.LASF71:
 1955 05f0 49535052 		.ascii	"ISPR\000"
 1955      00
 1956              	.LASF109:
 1957 05f5 48425249 		.ascii	"HBRIDGE_CH_4A\000"
 1957      4447455F 
 1957      43485F34 
 1957      4100
 1958              	.LASF110:
 1959 0603 48425249 		.ascii	"HBRIDGE_CH_4B\000"
 1959      4447455F 
 1959      43485F34 
 1959      4200
 1960              	.LASF93:
 1961 0611 49534152 		.ascii	"ISAR\000"
 1961      00
 1962              	.LASF47:
 1963 0616 55534152 		.ascii	"USART3_IRQn\000"
 1963      54335F49 
 1963      52516E00 
 1964              	.LASF28:
 1965 0622 5553425F 		.ascii	"USB_LP_IRQn\000"
 1965      4C505F49 
 1965      52516E00 
 1966              	.LASF116:
 1967 062e 6E54696D 		.ascii	"nTime\000"
 1967      6500
 1968              	.LASF96:
 1969 0634 4354524C 		.ascii	"CTRL\000"
 1969      00
 1970              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.3 20131129 (release) [ARM/embedded-4_8-br
ARM GAS  /tmp/cc2NM2Xt.s 			page 70


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/cc2NM2Xt.s:54     .text:00000000 $t
     /tmp/cc2NM2Xt.s:58     .text:00000000 NVIC_SetPriority
     /tmp/cc2NM2Xt.s:106    .text:00000044 $d
     /tmp/cc2NM2Xt.s:111    .text:0000004c $t
     /tmp/cc2NM2Xt.s:115    .text:0000004c SysTick_Config
     /tmp/cc2NM2Xt.s:166    .text:00000088 $d
     /tmp/cc2NM2Xt.s:171    .bss:00000000 $d
     /tmp/cc2NM2Xt.s:172    .bss:00000000 TimingDelay
     /tmp/cc2NM2Xt.s:177    .bss:00000004 BlinkSpeed
     /tmp/cc2NM2Xt.s:180    .text:0000008c $t
     /tmp/cc2NM2Xt.s:185    .text:0000008c main
     /tmp/cc2NM2Xt.s:246    .text:000000dc Delay
     /tmp/cc2NM2Xt.s:237    .text:000000d8 $d
     /tmp/cc2NM2Xt.s:241    .text:000000dc $t
     /tmp/cc2NM2Xt.s:276    .text:000000f4 $d
     /tmp/cc2NM2Xt.s:280    .text:000000f8 $t
     /tmp/cc2NM2Xt.s:285    .text:000000f8 TimingDelay_Decrement
     /tmp/cc2NM2Xt.s:309    .text:0000010c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_GetClocksFreq
hal_setup
adc_read
hbridge_set
